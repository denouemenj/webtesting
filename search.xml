<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Material主题</title>
      <link href="/2018/10/28/Hexo%E5%85%A5%E5%9D%91%E6%95%99%E7%A8%8B/"/>
      <url>/2018/10/28/Hexo%E5%85%A5%E5%9D%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Material主题"><a href="#Material主题" class="headerlink" title="Material主题"></a>Material主题</h1><p><a href="https://github.com/EasyHexo/Easy-Hexo" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Maintained--by-EasyHexo-42B983.svg?longCache=true&amp;style=flat-square" alt=""></a><br><a href="https://github.com/ffdy" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Author-ffy-800080.svg?longCache=true&amp;style=flat-square" alt=""></a></p><p>:::tip<br>注意，这里介绍的Material主题是1.5.2的版本，新手不建议使用最新的版本，因为好像有很多Bug（作者最近失联了）<br>:::</p><p><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material主题地址</a></p><h2 id="Material主题演示"><a href="#Material主题演示" class="headerlink" title="Material主题演示"></a>Material主题演示</h2><p><img src="https://camo.githubusercontent.com/1e9260f301fe915fb3e4826831fde943229523cb/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30392f30372f353962313336376637366664622e706e67" alt="演示"></p><h2 id="下载Material主题"><a href="#下载Material主题" class="headerlink" title="下载Material主题"></a>下载Material主题</h2><ol><li><p>进入 Github，下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="noopener">Material</a> 主题 1.5.2 的版本。</p></li><li><p>将下载下来的主题解压，将解压的文件夹重命名为 <code>Material</code>。</p></li><li><p>将这个文件夹放到你的博客根目录下的 themes 文件夹下。</p></li></ol><p><img src="https://s1.ax1x.com/2018/10/27/i6XOpT.png" alt="i6XOpT.png"></p><h2 id="启用Material主题"><a href="#启用Material主题" class="headerlink" title="启用Material主题"></a>启用Material主题</h2><p>:::tip<br>这里有两个 <code>_config.yml</code> 文件，一个位于博客根目录,另一个位于主题文件夹下，下面分别叫他们<code>根 _config.yml</code>文件和<code>主题 _config.yml</code>文件。<br>:::</p><p>进入Material文件夹,将<code>_config.template.yml</code> 重命名为 <code>_config.yml</code><br>（这个 <code>_config.yml</code> 文件是 <code>主题_config.yml</code> 文件）</p><p>:::tip<br>建议你将 <code>_config.template.yml</code> 文件备份，防止一些不可描述的的问题。<br>:::</p><p><img src="https://s1.ax1x.com/2018/10/27/i6x8mQ.png" alt="i6x8mQ.png"></p><p>回到主题根目录，打开<code>根 _config.yml</code>文件，找到 <code>theme</code> 属性</p><p><img src="https://s1.ax1x.com/2018/10/27/i6zA3V.png" alt="i6zA3V.png"><br><img src="https://s1.ax1x.com/2018/10/27/i6Lih8.md.png" alt="i6Lih8.md.png"></p><p>将后面的字段改为你刚刚改的主题文件夹的名字，比如我的<code>Material</code>。<br>:::tip</p><p>在 yml 中，冒号后面必须加一个空格，否则会报错。</p><p>:::</p><p>OK，Material 主题就正式启用了下面，就是见证奇迹的时候了，有没有一点小激动呢?</p><p>回到博客根目录，打开终端，输入:</p><pre><code class="lang-brash">$ hexo clean</code></pre><p>回车</p><p><img src="https://s1.ax1x.com/2018/10/27/icPF6P.png" alt="icPF6P.png"></p><p>完美！！！:tada:</p><p>好，再输入:</p><pre><code class="lang-brash">$ hexo g</code></pre><p>回车</p><p><img src="https://s1.ax1x.com/2018/10/27/icPQlq.png" alt="icPQlq.png"></p><p>完全OK！！！:tada:</p><p>输入:</p><pre><code class="lang-brash">$ hexo s</code></pre><p>回车</p><p><img src="https://s1.ax1x.com/2018/10/27/icPqhj.png" alt="icPqhj.png"></p><p>打开浏览器输入<code>http://localhost:4000</code>，即可看见你博客的样子。</p><p><img src="https://s1.ax1x.com/2018/10/27/icPW9A.png" alt="icPW9A.png"><br><img src="https://s1.ax1x.com/2018/10/27/icP2hd.png" alt="icP2hd.png"></p><p>点片文章试试，如果没问题，那么恭喜你！<br>:tada: :tada: :tada: :tada:</p><p>如果你想让你的Blog马力全开,那么请继续往下看</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>本站公告</title>
      <link href="/2018/10/26/%E6%9C%AC%E7%AB%99%E5%85%AC%E5%91%8A/"/>
      <url>/2018/10/26/%E6%9C%AC%E7%AB%99%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到FFY’s-Blog"><a href="#欢迎来到FFY’s-Blog" class="headerlink" title="欢迎来到FFY’s Blog"></a>欢迎来到FFY’s Blog</h1><p>这是我用HEXO搭建在的github上的一个Blog,因此,图片的加载可能有点慢<br>目前,本站的功能还在继续更新<br>如果你有什么好的建议,欢迎在最下方的评论留下你的昵称,邮箱和想法,或者直接<a href="https://ffdy.github.io/about/">联系我</a><br><br><br><br><br>本站的文章都比较水 <del>(好吧,是水的不要不要的)</del> ,请大佬勿喷</p><p>如果你对HEXO静态Blog感兴趣,请直接联系我,我会尽我所能帮助你</p><h3 id="本站的功能清单"><a href="#本站的功能清单" class="headerlink" title="本站的功能清单:"></a>本站的功能清单:</h3><ul><li>鼠标点击效果</li><li>页面欺骗</li><li>Live2D宠物</li><li>Markdown</li><li>mathjax数学公式</li><li>mermaid图表</li><li>语法高亮</li><li>评论系统</li><li>分享系统</li><li>站内搜索</li><li>文章置顶</li><li>随机图片</li><li>文章标签</li><li>文章分类</li></ul><p>我是疯疯芸,你也可以叫我FFY,感谢你的来访</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>「一本通 5.1 例 2」能量项链</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E4%BE%8B%202%E3%80%8D%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E4%BE%8B%202%E3%80%8D%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>同石子合并<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=210;int n,f[maxn][maxn];int ll[maxn];int main(){  scanf(&quot;%d&quot;,&amp;n);  for(int i=1;i&lt;=n;i++)  {      scanf(&quot;%d&quot;,&amp;ll[i]);      ll[i+n]=ll[i];  }  for(int l=1;l&lt;n*2;l++)  for(int i=1;i+l&lt;=n*2;i++)  {      int j=i+l;      for(int k=i;k&lt;j;k++)      f[i][j]=max(f[i][j],f[i][k]+f[k+1][j]+ll[i]*ll[k+1]*ll[j+1]);  }  int ans=0;  for(int i=1;i&lt;=n;i++)ans=max(ans,f[i][i+n-1]);  printf(&quot;%d\n&quot;,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTg0NjIxOTA1Ml19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AHOI2017初中组 guide</title>
      <link href="/2018/10/23/%5BAHOI2017%E5%88%9D%E4%B8%AD%E7%BB%84%5Dguide/"/>
      <url>/2018/10/23/%5BAHOI2017%E5%88%9D%E4%B8%AD%E7%BB%84%5Dguide/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>对于一张有向图,每条边有两个边权,有两套GPS会分别按两个边权计算所在到终点的最短路,如果你不按其中一套GPS说的路走,就会产生1的抱怨,求从起点到终点的最少抱怨数</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>因为每次两套GPS都会判断当前要去的点是否在当前点到终点的最短路上,所以我们可以反向建边,跑出每套GPS从终点到每个点的最短路,然后我们重新建图,依次枚举原图的每条边,将边权赋值为2,如果要去的点在某套GPS的最短路上,边权减一.最后跑一遍最短路就可以得出$ans$</p></blockquote><ul><li>反向建边</li><li>反向SPFA</li><li>边重构</li><li>反向SPFA</li><li>$ans$</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;using namespace std;const int maxn=1e5+10;int n,m,head[maxn],num;int dis[maxn],dis1[maxn],di[maxn];bool use[maxn];struct fy{int from,to,d,dd,e,next;}q[maxn*5];void add(int a,int b,int c,int d){    q[++num]=(fy){a,b,c,d,0,head[a]};head[a]=num;}void sp(){    memset(dis,0x3f,sizeof dis);dis[n]=0;    memset(dis1,0x3f,sizeof dis1);dis1[n]=0;    queue&lt;int&gt;qq;qq.push(n);use[n]=true;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis[b]&gt;dis[a]+q[i].d)            {                dis[b]=dis[a]+q[i].d;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }    qq.push(n);use[n]=true;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis1[b]&gt;dis1[a]+q[i].dd)            {                dis1[b]=dis1[a]+q[i].dd;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }}void sp1(){    memset(di,0x3f,sizeof di);di[n]=0;    queue&lt;int&gt;qq;qq.push(n);use[n]=true;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(di[b]&gt;di[a]+q[i].e)            {                di[b]=di[a]+q[i].e;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c,d;    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d%d%d&quot;,&amp;a,&amp;b,&amp;c,&amp;d);        add(b,a,c,d);    }    sp();//反向SPFA    for(int i=1;i&lt;=num;i++)//边重构    {        d=2;a=q[i].from;b=q[i].to;        if(dis[b]==dis[a]+q[i].d)d--;        if(dis1[b]==dis1[a]+q[i].dd)d--;        q[i].e=d;    }    sp1();    printf(&quot;%d\n&quot;,di[1]);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTM3NTA2Nzg0NV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POI working up</title>
      <link href="/2018/10/23/%5BPOI%5Dworking%20up/"/>
      <url>/2018/10/23/%5BPOI%5Dworking%20up/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>有两个人和一个$n \times m$的矩阵,一个从左上角出发,只能向右,向下走,去右下角;另一个从右上角出发只能向左,向下走,去左下角.矩阵的每一格有一个权值,走过会得到这个权值.很显然,两个人肯定会相遇,他们相遇的那一格的权值不取,求两人只相遇一次权值和的最大值</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>读完题,你是否有想到<code>方格取数</code><br>做法非常简单也非常暴力,开四个二维数组分别记录从四个角出发的最优解,然后$n^2$枚举合法的点,更新$ans$<br>因为只相遇一次,所以两人相遇时只有两种直线走法,不会转弯</strong></p><ul><li>注意下标,容易迷糊</li><li>记得开<code>long long</code><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=1010;ll mp[maxn][maxn],f1[maxn][maxn];ll f2[maxn][maxn],f3[maxn][maxn];ll f4[maxn][maxn];int n,m;int main(){  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);  for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=m;j++)scanf(&quot;%lld&quot;,&amp;mp[i][j]);  for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=m;j++)  f1[i][j]=max(f1[i-1][j],f1[i][j-1])+mp[i][j];  for(int i=n;i;i--)for(int j=m;j;j--)  f2[i][j]=max(f2[i+1][j],f2[i][j+1])+mp[i][j];  for(int i=1;i&lt;=n;i++)for(int j=m;j;j--)  f3[i][j]=max(f3[i-1][j],f3[i][j+1])+mp[i][j];  for(int i=n;i;i--)for(int j=1;j&lt;=m;j++)  f4[i][j]=max(f4[i+1][j],f4[i][j-1])+mp[i][j];  //暴力美学  ll ans=0;  for(int i=2;i&lt;n;i++)for(int j=2;j&lt;m;j++)  {      ans=max(ans,f1[i][j-1]+f2[i][j+1]+f3[i-1][j]+f4[i+1][j]);      ans=max(ans,f1[i-1][j]+f2[i+1][j]+f3[i][j+1]+f4[i][j-1]);  }  printf(&quot;%lld\n&quot;,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMjAxNTEzOTAxMiwtMjExMjg0OTMyMCw4MzExMjc2MzhdfQ==--></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 例 1」活动安排</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%201%E3%80%8D%E6%B4%BB%E5%8A%A8%E5%AE%89%E6%8E%92/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%201%E3%80%8D%E6%B4%BB%E5%8A%A8%E5%AE%89%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>区间不相交问题<ul><li>按右端点排序</li><li>枚举,当左端点未被标记时,$ans++$,标记右端点</li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1200;int n;struct fy{int x,y;bool operator&lt;(const fy&amp;a)const{return y&lt;a.y;};}q[maxn];int main(){    scanf(&quot;%d&quot;,&amp;n);int ans=0;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d%d&quot;,&amp;q[i].x,&amp;q[i].y);    sort(q+1,q+1+n);int w=0;    for(int i=1;i&lt;=n;i++)    {        if(q[i].x&gt;=w)        {            ans++;            w=q[i].y;        }    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTg2OTU5MzM5OV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 例 2」种树</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%202%E3%80%8D%E7%A7%8D%E6%A0%91/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%202%E3%80%8D%E7%A7%8D%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>区间选点问题<ul><li>按右端点排序</li><li>枚举,当该区间未被选够点时,从后往前选择未被选择的点,直到选够</li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=3e4+10;int n,m;bool use[maxn]; struct fy{int x,y,d;bool operator&lt;(const fy&amp;a)const{return y&lt;a.y;};}q[maxn];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=m;i++)scanf(&quot;%d%d%d&quot;,&amp;q[i].x,&amp;q[i].y,&amp;q[i].d);    sort(q+1,q+1+m);    for(int i=1;i&lt;=m;i++)    {        for(int j=q[i].x;j&lt;=q[i].y;j++)        {            if(use[j])q[i].d--;            if(!q[i].d)break;        }        if(q[i].d&gt;0)for(int j=q[i].y;j&gt;=q[i].x;j--)        {            if(!use[j])            {                use[j]=true;                q[i].d--;                if(!q[i].d)break;            }        }    }    int ans=0;    for(int i=1;i&lt;=n;i++)if(use[i])ans++;    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbNjQ2MDExMTYyXX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 例 3」喷水装置</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%203%E3%80%8D%E5%96%B7%E6%B0%B4%E8%A3%85%E7%BD%AE/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%203%E3%80%8D%E5%96%B7%E6%B0%B4%E8%A3%85%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>区间覆盖问题 <ul><li>按左端点排序</li><li>枚举,选择能覆盖当前节点,右端点最远的节点,将当前节点更新为该最远节点的右端点</li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=15e3+10;int t,n,l,w,cnt,ans;struct fy{double x,y;bool operator&lt;(const fy&amp;a)const{return x&lt;a.x;};}q[maxn];int main(){    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        cnt=0;ans=0;        double a,b;        scanf(&quot;%d%d%d&quot;,&amp;n,&amp;l,&amp;w);        for(int i=1;i&lt;=n;i++)        {            scanf(&quot;%lf%lf&quot;,&amp;a,&amp;b);            if(b*2&lt;=w)continue;            q[++cnt].x=a-sqrt(b*b-w*w/4.0);            q[cnt].y=a+sqrt(b*b-w*w/4.0);        }        double now=0,la=0;        sort(q+1,q+1+cnt);        for(int i=1;i&lt;=cnt;i++)        {            if(q[i].x&gt;la){ans++;la=now;}            if(q[i].x&lt;=la)now=max(now,q[i].y);        }        if(la&lt;l)ans++;        if(now&lt;l)printf(&quot;-1\n&quot;);        else printf(&quot;%d\n&quot;,ans);    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTQzNjEwMzEyOV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 例 4」加工生产调度</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%204%E3%80%8D%E5%8A%A0%E5%B7%A5%E7%94%9F%E4%BA%A7%E8%B0%83%E5%BA%A6/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E4%BE%8B%204%E3%80%8D%E5%8A%A0%E5%B7%A5%E7%94%9F%E4%BA%A7%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>流水作业调度问题<ul><li>Johnson算法(<del>比较迷,反正我没懂</del>)</li><li>按$min(i.a,j.b)&lt;min(i.b,j.a)$排序</li><li>枚举记录$ans$</li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1010;int n;struct fy{int x,y,w;}q[maxn];int main(){    scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;q[i].x);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;q[i].y);    for(int i=1;i&lt;=n;i++)q[i].w=i;    for(int i=1;i&lt;n;++i)for(int j=i+1;j&lt;=n;++j)    if(min(q[i].x,q[j].y)&gt;min(q[i].y,q[j].x)) swap(q[i],q[j]);    int ans=0,bns=0;    for(int i=1;i&lt;=n;i++)    {        ans+=q[i].x;        bns=max(bns,ans);        bns+=q[i].y;    }    printf(&quot;%d\n&quot;,bns);    for(int i=1;i&lt;=n;i++)printf(&quot;%d &quot;,q[i].w);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1NzQ2OTcwNTJdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 练习 1」数列极差</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%95%B0%E5%88%97%E6%9E%81%E5%B7%AE/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%95%B0%E5%88%97%E6%9E%81%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>贪心每次取极值</li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=5e4+10;int n;ll ans;struct fy{    ll x;    bool operator&lt;(const fy&amp;a)    const{return x&gt;a.x;};};struct ffy{    ll x;    bool operator&lt;(const ffy&amp;a)    const{return x&lt;a.x;};};priority_queue&lt;fy&gt;q;priority_queue&lt;ffy&gt;qq;int main(){    scanf(&quot;%d&quot;,&amp;n);ll a,b;    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%lld&quot;,&amp;a);        q.push((fy){a});        qq.push((ffy){a});    }    scanf(&quot;%lld&quot;,&amp;a);    ll ma,mi;    while(!q.empty())    {        ma=q.top().x;q.pop();        if(q.empty())break;        b=q.top().x;q.pop();         q.push((fy){ma*b+1});    }    while(!qq.empty())    {        mi=qq.top().x;qq.pop();        if(qq.empty())break;        b=qq.top().x;qq.pop();        qq.push((ffy){mi*b+1});    }    ans=ma-mi;    printf(&quot;%lld\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMzkyMzY0OTQ2XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 练习 2」数列分段</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%95%B0%E5%88%97%E5%88%86%E6%AE%B5/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%95%B0%E5%88%97%E5%88%86%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>每段尽量装最多</li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10;int n,m,s[maxn],ans;int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++){scanf(&quot;%d&quot;,&amp;s[i]);}    int v=m;    for(int i=1;i&lt;=n;i++)    {        if(v&lt;s[i])        {            ans++;            v=m-s[i];        }        else v-=s[i];//        printf(&quot;%d\n&quot;,v);    }    ans++;    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE5NjU1MzI0NjRdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 练习 3」线段</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%BA%BF%E6%AE%B5/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%BA%BF%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>区间不相交问题<ul><li>按右端点排序</li><li>枚举,当左端点未被标记时,$ans++$,标记右端点</li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e6+10;int n;struct fy{    int x,y;    bool operator&lt;(const fy&amp;a)    const{return y&lt;a.y;};}q[maxn];int main(){    scanf(&quot;%d&quot;,&amp;n);int ans=0;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d%d&quot;,&amp;q[i].x,&amp;q[i].y);    sort(q+1,q+1+n);int now=0;    for(int i=1;i&lt;=n;i++)    {        int a=q[i].x;        if(now&lt;=a)        {            ans++;            now=q[i].y;        }    }    printf(&quot;%d&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTYzNDI4MDY2XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 练习 4」家庭作业</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%204%E3%80%8D%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%204%E3%80%8D%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>带限期和罚款的单位时间任务调度<ul><li>按期限排序<ul><li>用优先队列维护</li><li>若当前时间完成的任务数少于该时间能完成的任务数,直接将权值入队</li><li>若已经相等,取出队列中最小的元素与当前权值比较,将较大的入队</li><li>最后累加队列中的元素权值</li></ul></li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e6+10;int n,l;struct fy{    int x,y;    bool operator&lt;(const fy&amp;a)    const{return x&lt;a.x;};}q[maxn];struct ffy{    int x;    bool operator&lt;(const ffy&amp;a)    const{return x&gt;a.x;}};priority_queue&lt;ffy&gt;qq;int main(){    scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d%d&quot;,&amp;q[i].x,&amp;q[i].y);    sort(q+1,q+1+n);    for(int i=1;i&lt;=n;i++)    {        int a=q[i].x;        int b=q[i].y;        if(l&lt;a)        {            qq.push((ffy){b});            l++;        }        else         {            int c=qq.top().x;            if(b&gt;c)            {                qq.pop();                qq.push((ffy){b});            }        }    }    int ans=0;    while(!qq.empty())    {        ans+=qq.top().x;        qq.pop();    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTEyNDgyMjg0NTZdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 练习 5」钓鱼</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%205%E3%80%8D%E9%92%93%E9%B1%BC/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.1%20%E7%BB%83%E4%B9%A0%205%E3%80%8D%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<ul><li>十分巧妙的贪心</li><li>单调队列</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=110;int n,h,dis[maxn],ans,bns;int s[maxn],ss[maxn];struct ffy{    int x,y;    bool operator&lt;(const ffy&amp;a)    const{return x&lt;a.x;};};priority_queue&lt;ffy&gt;qq;int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;h);h*=12;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;s[i]);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;ss[i]);    for(int i=2;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;dis[i]);    for(int i=1;i&lt;=n;i++)    {        h-=dis[i];int time=0;bns=0;        for(int j=1;j&lt;=i;j++)qq.push((ffy){s[j],j});        while(++time&lt;=h&amp;&amp;!qq.empty())        {            int a=qq.top().x;            int b=qq.top().y;            if(a&lt;=0)break;            bns+=a;            qq.pop();            qq.push((ffy){a-ss[b],b});        }        ans=max(ans,bns);    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTIwMjYzMzQ2MDldfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.2 例 1」愤怒的牛</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.2%20%E4%BE%8B%201%E3%80%8D%E6%84%A4%E6%80%92%E7%9A%84%E7%89%9B/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.2%20%E4%BE%8B%201%E3%80%8D%E6%84%A4%E6%80%92%E7%9A%84%E7%89%9B/</url>
      
        <content type="html"><![CDATA[<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10;const double exp=1e-6,inf=1e9;int n,m;double s[maxn],sum[maxn];bool can(double a)//分数规划{    double res=1e10,ans=-1e10;    for(int i=1;i&lt;=n;i++) sum[i]=sum[i-1]+s[i]-a;    for(int i=m;i&lt;=n;i++) {res=min(res,sum[i-m]);ans=max(ans,sum[i]-res);}    if(ans&gt;=0) return true;//寻找一段长度大于等于m,平均数大于等于a的区间    return false;}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);double l=inf,r=0;    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%lf&quot;,&amp;s[i]);        l=min(l,s[i]);r=max(r,s[i]);    }    while(r-l&gt;=exp)    {        double mid=(l+r)/2.0;        if(can(mid))l=mid;        else r=mid;    }    int output=(int)(r*(double)1000.0);    printf(&quot;%d\n&quot;,output);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTY5MTQ4NjkzM119-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 01分数规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.2 例 3」曲线</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.2%20%E4%BE%8B%203%E3%80%8D%E6%9B%B2%E7%BA%BF/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%201.2%20%E4%BE%8B%203%E3%80%8D%E6%9B%B2%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>三分裸题<br>可以证明n个函数同一横坐标的最值形成的图像为单峰函数<br>精度比较坑,要$10^{-9}$</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10;const double eps=1e-9;int t,n,a[maxn],b[maxn],c[maxn];double check(double x){    double ans=-1e9;    for(int i=1;i&lt;=n;i++)    ans=max(ans,a[i]*x*x+b[i]*x+c[i]);    return ans;}int main(){    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        scanf(&quot;%d&quot;,&amp;n);        for(int i=1;i&lt;=n;i++)scanf(&quot;%d%d%d&quot;,&amp;a[i],&amp;b[i],&amp;c[i]);        double l=0,r=1000;        while(l+eps&lt;=r)        {            double m1=l+(r-l)/3.0;            double m2=r-(r-l)/3.0;            if(check(m1)&lt;=check(m2))r=m2;            else l=m1;        }        printf(&quot;%.4lf\n&quot;,check(l));    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbOTkwNTkwMzUwLC04MDMwNDI3NTJdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.1 例 1」黑暗城堡</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E4%BE%8B%201%E3%80%8D%E9%BB%91%E6%9A%97%E5%9F%8E%E5%A0%A1/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E4%BE%8B%201%E3%80%8D%E9%BB%91%E6%9A%97%E5%9F%8E%E5%A0%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>最短路径树计数</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1010,mod=(1&lt;&lt;31)-1;int n,m,head[maxn],num,dis[maxn],sum[maxn];long long ans=1;bool use[maxn];struct fy{int to,d,next;}q[maxn*maxn];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(){    queue&lt;int&gt;qq;qq.push(1);use[1]=true;    memset(dis,0x3f,sizeof dis);dis[1]=0;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis[b]&gt;dis[a]+q[i].d)            {                dis[b]=dis[a]+q[i].d;                if(!use[b])                {                    use[b]=true;                    qq.push(b);                }            }        }    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        add(a,b,c);add(b,a,c);    }    sp();    for(int i=1;i&lt;=n;i++)    {        for(int j=head[i];j;j=q[j].next)        {            a=q[j].to;            if(dis[a]==dis[i]+q[j].d)sum[a]++;        }    }    for(int i=2;i&lt;=n;i++)ans=ans*sum[i]%mod;    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTk1NjM0MjM3Nl19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.1 例 2」北极通讯网络</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E4%BE%8B%202%E3%80%8D%E5%8C%97%E6%9E%81%E9%80%9A%E8%AE%AF%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E4%BE%8B%202%E3%80%8D%E5%8C%97%E6%9E%81%E9%80%9A%E8%AE%AF%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>树外加点(同通讯网络)</li></ul><pre><code class="lang-cpp">#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=510;int n,m,num,fa[maxn];double x[maxn],y[maxn];int find(int a){    while(fa[a]!=a)a=fa[a]=fa[fa[a]];    return a;}struct fy{    int from,to;    double d;    bool operator&lt;(const fy &amp;a)const{return d&lt;a.d;};}q[maxn*maxn];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%lf%lf&quot;,&amp;x[i],&amp;y[i]);fa[i]=i;        for(int j=1;j&lt;i;j++)        {            double a=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);            q[++num]=(fy){j,i,sqrt(a)};        }    }    int ans=0;    sort(q+1,q+1+num);    for(int i=1;i&lt;=num;i++)    {        int a=find(q[i].from);        int b=find(q[i].to);        if(a!=b)        {            ans++;            fa[a]=b;            if(ans==(n-m))            {                printf(&quot;%.2lf\n&quot;,q[i].d);                return 0;            }        }    }    printf(&quot;0\n&quot;);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1MDIxODk4NzldfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.1 练习 1」新的开始</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>树外加点</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=310;int n,v[maxn],head[maxn],num,fa[maxn];struct fy{    int from,to,d;    bool operator&lt;(const fy &amp;a)const{return d&lt;a.d;};}q[maxn*maxn&lt;&lt;1];int find(int a){    while(fa[a]!=a)a=fa[a]=fa[fa[a]];    return a;}int main(){    scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%d&quot;,&amp;v[i]);        q[++num]=(fy){0,i,v[i]};        fa[i]=i;    }    for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=n;j++)    {        scanf(&quot;%d&quot;,&amp;q[++num].d);        q[num].from=i;q[num].to=j;    }    sort(q+1,q+1+num);int ans=0,e=0;    for(int i=1;i&lt;=num;i++)    {        int a=find(q[i].from);        int b=find(q[i].to);        if(a!=b)        {            e++;            ans+=q[i].d;            fa[a]=b;            if(e==n)            {                printf(&quot;%d\n&quot;,ans);                return 0;            }        }    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMjMwNzc1NzQ3XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.1 练习 2」构造完全图</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%9E%84%E9%80%A0%E5%AE%8C%E5%85%A8%E5%9B%BE/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%9E%84%E9%80%A0%E5%AE%8C%E5%85%A8%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>使两点连通的边的权值+1</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=1e5+10;int n,fa[maxn],size[maxn];ll ans;struct fy{int from,to,d;bool operator&lt;(const fy &amp;a)const{return d&lt;a.d;};}q[maxn];int find(int a){    if(fa[a]!=a)    {        size[fa[a]]+=size[a];        size[a]=0;        fa[a]=find(fa[a]);    }    return fa[a];}int main(){    scanf(&quot;%d&quot;,&amp;n);int a,b,c;    for(int i=1;i&lt;=n;i++){fa[i]=i;size[i]=1;}    for(int i=1;i&lt;n;i++)scanf(&quot;%d%d%d&quot;,&amp;q[i].from,&amp;q[i].to,&amp;q[i].d);    sort(q+1,q+n);    for(int i=1;i&lt;n;i++)    {        int a=find(q[i].from);        int b=find(q[i].to);        ans+=q[i].d;        ans+=(ll)(q[i].d+1)*(size[a]*size[b]-1);        fa[a]=b;        size[b]+=size[a];        size[a]=0;//        for(int j=1;j&lt;n;j++)printf(&quot;%d &quot;,size[j]);//        printf(&quot;\n&quot;);    }    printf(&quot;%lld\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbNzU2MTgxMDUyXX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.1 练习 3」秘密的牛奶运输</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%A7%98%E5%AF%86%E7%9A%84%E7%89%9B%E5%A5%B6%E8%BF%90%E8%BE%93/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%A7%98%E5%AF%86%E7%9A%84%E7%89%9B%E5%A5%B6%E8%BF%90%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<ul><li>次小生成树(最小生成树+LCA)<br>```cpp<h1 id="include"><a href="#include" class="headerlink" title="include"></a>include<cstdio></cstdio></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include"></a>include<cstring></cstring></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include"></a>include<algorithm></algorithm></h1><h1 id="define-ll-long-long"><a href="#define-ll-long-long" class="headerlink" title="define ll long long"></a>define ll long long</h1>using namespace std;<br>const int maxn=5100,maxm=2e4+10;<br>int n,m,head[maxn],num,fa[maxn];<br>bool usee[maxm];<br>struct fy{int to,d,next;}e[maxn&lt;&lt;1];<br>struct ffy<br>{<br>  int from,to,d;<br>  bool operator&lt;(const ffy &amp;a)const{return d&lt;a.d;};<br>}q[maxm];<br>int find(int a){while(fa[a]!=a)a=fa[a]=fa[fa[a]];return a;}<br>void add(int a,int b,int c){e[++num]=(fy){b,c,head[a]};head[a]=num;}<br>int pa[maxn][40],ma[maxn][40],dep[maxn];<br>void dfs(int a,int fat)<br>{<br>  pa[a][0]=fat;dep[a]=dep[fat]+1;<br>  for(int i=1;(1&lt;&lt;i)&lt;=dep[a];i++)<br>  {<pre><code>  pa[a][i]=pa[pa[a][i-1]][i-1];  ma[a][i]=max(ma[a][i-1],ma[pa[a][i-1]][i-1]);</code></pre>  }<br>  for(int i=head[a];i;i=e[i].next)<br>  {<pre><code>  int b=e[i].to;if(b==fat)continue;  ma[b][0]=e[i].d;dfs(b,a);</code></pre>  }</li></ul><p>}<br>int lca(int a,int b)<br>{<br>    int he=0;<br>    if(dep[a]<dep[b])swap(a,b); for(int="" i="25;i">=0;i—)if(dep[pa[a][i]]&gt;=dep[b])<br>    {<br>        he=max(he,ma[a][i]);<br>        a=pa[a][i];<br>    }<br>    if(a==b)return he;<br>    for(int i=25;i&gt;=0;i—)if(pa[a][i]!=pa[b][i])<br>    {<br>        he=max(he,max(ma[a][i],ma[b][i]));<br>        a=pa[a][i];b=pa[b][i];<br>    }<br>    return he=max(he,max(ma[a][0],ma[b][0]));<br>}<br>int main()<br>{<br>    scanf(“%d%d”,&amp;n,&amp;m);for(int i=1;i&lt;=n;i++)fa[i]=i;<br>    for(int i=1;i&lt;=m;i++)scanf(“%d%d%d”,&amp;q[i].from,&amp;q[i].to,&amp;q[i].d);<br>    sort(q+1,q+1+m);int he=0;ll ans=0;<br>    for(int i=1;i&lt;=m;i++)<br>    {<br>        int a=find(q[i].from);<br>        int b=find(q[i].to);<br>        if(a!=b)<br>        {<br>            fa[a]=b;ans+=q[i].d;he++;usee[i]=true;<br>            add(q[i].from,q[i].to,q[i].d);add(q[i].to,q[i].from,q[i].d);<br>            if(he==(n-1))break;<br>        }<br>    }<br>    dfs(1,0);int maxl=1e9+7;<br>    for(int i=1;i&lt;=m;i++)if(!usee[i])<br>    {<br>        int a=lca(q[i].from,q[i].to);<br>        if(q[i].d-a)maxl=min(maxl,q[i].d-a);<br>    }<br>    printf(“%lld\n”,ans+(ll)maxl);<br>    return 0;<br>}<br>```<br><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1NTMwMDIyMV19--></dep[b])swap(a,b);></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 例 1」Sightseeing Trip</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E4%BE%8B%201%E3%80%8DSightseeing%20Trip/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E4%BE%8B%201%E3%80%8DSightseeing%20Trip/</url>
      
        <content type="html"><![CDATA[<ul><li>spfa求最小环<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=210,inf=6e8+7;int n,m,xx[maxn],w,fa[maxn][maxn];ll map[maxn][maxn],dis[maxn][maxn],ans=inf;void floyd(){  ll he;  for(int k=1;k&lt;=n;k++)  {      for(int i=1;i&lt;k;i++)for(int j=i+1;j&lt;k;j++)      {          he=dis[i][j]+map[j][k]+map[k][i];          if(he&lt;ans)          {              ans=he;w=0;int a=j;              while(a!=i){xx[++w]=a;a=fa[i][a];}              xx[++w]=i;xx[++w]=k;          }      }      for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=n;j++)      {          he=dis[i][k]+dis[k][j];          if(he&lt;dis[i][j])          {              dis[i][j]=he;              fa[i][j]=fa[k][j];          }      }  }}int main(){//    freopen(&quot;trip7.in&quot;,&quot;r&quot;,stdin);  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b;ll c;  for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=n;j++)  {      map[i][j]=dis[i][j]=inf;      fa[i][j]=i;  }  for(int i=1;i&lt;=m;i++)  {      scanf(&quot;%d%d%lld&quot;,&amp;a,&amp;b,&amp;c);c=min(c,dis[a][b]);      dis[a][b]=dis[b][a]=c;      map[a][b]=map[b][a]=dis[a][b];  }  floyd();  if(ans==inf)  {      printf(&quot;No solution.\n&quot;);      return 0;  }  for(int i=1;i&lt;=w;i++)printf(&quot;%d &quot;,xx[i]);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMzI0MDMzOTkzXX0=--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 最小环 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 例 3」架设电话线</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E4%BE%8B%203%E3%80%8D%E6%9E%B6%E8%AE%BE%E7%94%B5%E8%AF%9D%E7%BA%BF/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E4%BE%8B%203%E3%80%8D%E6%9E%B6%E8%AE%BE%E7%94%B5%E8%AF%9D%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<ul><li>分成图最短路裸题<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1010,maxm=2010;int n,m,v,head[maxn],num,dis[maxn][maxn];bool use[maxn];struct fy{int to,d,next;}q[maxm&lt;&lt;1];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(){  queue&lt;int&gt;qq;qq.push(1);use[1]=true;  memset(dis,0x3f,sizeof dis);  for(int i=0;i&lt;=v;i++)dis[1][i]=0;  while(!qq.empty())  {      int a=qq.front();qq.pop();use[a]=false;      for(int i=head[a];i;i=q[i].next)      {          int b=q[i].to;          for(int j=0;j&lt;=v;j++)if(dis[b][j]&gt;max(dis[a][j],q[i].d))          {              dis[b][j]=max(dis[a][j],q[i].d);              if(!use[b]){use[b]=true;qq.push(b);}          }          for(int j=1;j&lt;=v;j++)if(dis[b][j]&gt;dis[a][j-1])          {              dis[b][j]=dis[a][j-1];              if(!use[b]){use[b]=true;qq.push(b);}          }      }  }}int main(){  scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;v);int a,b,c;  for(int i=1;i&lt;=m;i++)  {      scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);      add(a,b,c);add(b,a,c);  }  sp();  if(dis[n][v]!=dis[0][0])printf(&quot;%d\n&quot;,dis[n][v]);  else printf(&quot;-1\n&quot;);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTQzMzkyNTQ3Nl19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 分层图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 练习 1」农场派对</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E5%86%9C%E5%9C%BA%E6%B4%BE%E5%AF%B9/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E5%86%9C%E5%9C%BA%E6%B4%BE%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<ul><li>正反向建边<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1010,maxm=1e5+10;bool use[maxn];int n,m,s,ans,head[maxn],head1[maxn],num,dis[maxn],dis1[maxn];struct fy{int to,d,next;}q[maxm],q1[maxm];void add(int a,int b,int c){  q[++num]=(fy){b,c,head[a]};head[a]=num;  q1[num]=(fy){a,c,head1[b]};head1[b]=num;}void sp(){  queue&lt;int&gt;qq;qq.push(s);use[s]=true;  memset(dis,0x3f,sizeof dis);dis[s]=0;  while(!qq.empty())  {      int a=qq.front();qq.pop();use[a]=false;      for(int i=head[a];i;i=q[i].next)      {          int b=q[i].to;          if(dis[b]&gt;dis[a]+q[i].d)          {              dis[b]=dis[a]+q[i].d;              if(!use[b]){use[b]=true;qq.push(b);}          }      }  }  while(!qq.empty())qq.pop();  memset(use,false,sizeof use);  qq.push(s);use[s]=true;  memset(dis1,0x3f,sizeof dis1);dis1[s]=0;  while(!qq.empty())  {      int a=qq.front();qq.pop();use[a]=false;      for(int i=head1[a];i;i=q1[i].next)      {          int b=q1[i].to;          if(dis1[b]&gt;dis1[a]+q1[i].d)          {              dis1[b]=dis1[a]+q1[i].d;              if(!use[b]){use[b]=true;qq.push(b);}          }      }  }}int main(){  scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;s);int a,b,c;  for(int i=1;i&lt;=m;i++){scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);add(a,b,c);}  sp();  for(int i=1;i&lt;=n;i++)ans=max(ans,dis[i]+dis1[i]);  printf(&quot;%d\n&quot;,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE4OTAwNDQ1NDRdfQ==--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 练习 2」Roadblocks</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%202%E3%80%8DRoadblocks/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%202%E3%80%8DRoadblocks/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>严格次短路问题<br>正反建边,跑两次spfa<br>枚举两点间的边和分别到终点和起点的距离,更新次短路</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxm=1e5+10,maxn=5e3+10;int n,m,ans,head[maxn],num,dis[maxn],dis1[maxn];bool use[maxn];struct fy{int to,d,next;}q[maxm&lt;&lt;1];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(){    queue&lt;int&gt;qq;qq.push(1);use[1]=true;    memset(dis,0x3f,sizeof dis);dis[1]=0;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis[b]&gt;dis[a]+q[i].d)            {                dis[b]=dis[a]+q[i].d;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }    qq.push(n);use[n]=true;    memset(dis1,0x3f,sizeof dis1);dis1[n]=0;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=true;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis1[b]&gt;dis1[a]+q[i].d)            {                dis1[b]=dis1[a]+q[i].d;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;    for(int i=1;i&lt;=m;i++){scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);add(a,b,c);add(b,a,c);}    sp();ans=1e9+7;    for(int i=1;i&lt;=n;i++)for(int j=head[i];j;j=q[j].next)    {        a=q[j].to;b=dis[i]+dis1[a]+q[j].d;        if(b!=dis[n]&amp;&amp;b&lt;ans)ans=b;    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbOTEwMDM5ODIxXX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 练习 3」最短路计数</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>在最短路的基础上加一个计数<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;queue&gt;using namespace std;const int maxn=1e6+10;int n,m,head[maxn],num,dis[maxn],s[maxn];struct fy{int to,next;}q[maxn&lt;&lt;2];struct ffy{int u,d;bool operator&lt;(const ffy a)const{return d&gt;a.d;};};priority_queue&lt;ffy&gt;qq;void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void dj(){  memset(dis,0x3f,sizeof dis);dis[1]=0;s[1]=1;  qq.push((ffy){1,0});  while(!qq.empty())  {      ffy a=qq.top();qq.pop();      if(a.d!=dis[a.u]) continue;      for(int i=head[a.u];i;i=q[i].next)      {          int b=q[i].to;          if(dis[b]&gt;dis[a.u]+1){dis[b]=dis[a.u]+1;s[b]=s[a.u];qq.push((ffy){b,dis[b]});}          else if(dis[b]==dis[a.u]+1)s[b]=(s[b]+s[a.u])%100003;      }  }}int main(){  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int x,y;  for(int i=1;i&lt;=m;i++){scanf(&quot;%d%d&quot;,&amp;x,&amp;y);add(x,y);add(y,x);}  dj();  for(int i=1;i&lt;=n;i++)printf(&quot;%d\n&quot;,s[i]);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTI1NjU0NzAxNl19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 练习 4」新年好</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%204%E3%80%8D%E6%96%B0%E5%B9%B4%E5%A5%BD/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%204%E3%80%8D%E6%96%B0%E5%B9%B4%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<ul><li>6遍spfa+暴力dfs<pre><code class="lang-cpp">#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=5e4+10,maxm=1e5+10,inf=1e9+7;int n,m,head[maxn],num,ans=inf,dis[6][maxn],s[6];struct fy{int to,d,next;}q[maxm&lt;&lt;1];bool use[maxn],ex[10];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(int a){  queue&lt;int&gt;qq;qq.push(s[a]);use[s[a]]=true;  memset(dis[a],0x3f,sizeof dis[a]);dis[a][s[a]]=0;  while(!qq.empty())  {      int b=qq.front();qq.pop();use[b]=false;      for(int i=head[b];i;i=q[i].next)      {          int c=q[i].to;          if(dis[a][c]&gt;dis[a][b]+q[i].d)          {              dis[a][c]=dis[a][b]+q[i].d;              if(!use[c]){use[c]=true;qq.push(c);}          }      }  }}void dfs(int a,int v){  bool can=false;  for(int i=1;i&lt;=5;i++)if(!ex[i])  {      can=true;      ex[i]=true;dfs(i,v+dis[a][s[i]]);      ex[i]=false;  }  if(!can)ans=min(ans,v);}int main(){  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;s[0]=1;  for(int i=1;i&lt;=5;i++)scanf(&quot;%d&quot;,&amp;s[i]);  for(int i=1;i&lt;=m;i++){scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);add(a,b,c);add(b,a,c);}  for(int i=0;i&lt;=5;i++)sp(i);  use[0]=true;dfs(0,0);  printf(&quot;%d\n&quot;,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTc1MzMzNzA4OF19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.2 练习 5」最优贸易</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%205%E3%80%8D%E6%9C%80%E4%BC%98%E8%B4%B8%E6%98%93/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.2%20%E7%BB%83%E4%B9%A0%205%E3%80%8D%E6%9C%80%E4%BC%98%E8%B4%B8%E6%98%93/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>正反建边,两遍spfa,正向记录到每个点的最小值,反向记录到每个点的最大值,最后每个点扫一遍,更新max和min的差值<br>正反spfa同时验证了起点到终点的连通性</strong></p><pre><code class="lang-cpp">#include&lt;queue&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10,maxm=5e5+10;int n,m,head[maxn],head1[maxn],num,ans,v[maxn],mal[maxn],mil[maxn];bool use[maxn];struct fy{int to,next;}q[maxm&lt;&lt;1],q1[maxm&lt;&lt;1];void add(int a,int b){    q[++num]=(fy){b,head[a]};head[a]=num;    q1[num]=(fy){a,head1[b]};head1[b]=num;}void sp(){    queue&lt;int&gt;qq;qq.push(1);use[1]=true;    memset(mil,0x3f,sizeof mil);mil[1]=v[1];    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(mil[b]&gt;min(mil[a],v[b]))            {                mil[b]=min(mil[a],v[b]);                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }    qq.push(n);use[n]=true;mal[n]=v[n];    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head1[a];i;i=q1[i].next)        {            int b=q1[i].to;            if(mal[b]&lt;max(mal[a],v[b]))            {                mal[b]=max(mal[a],v[b]);                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }    for(int i=1;i&lt;=n;i++)ans=max(ans,mal[i]-mil[i]);}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;v[i]);    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        add(a,b);if(c==2)add(b,a);    }    sp();    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTEzOTA2MjU1MjNdfQ==--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.4 例 1」Intervals</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.4%20%E4%BE%8B%201%E3%80%8DIntervals/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.4%20%E4%BE%8B%201%E3%80%8DIntervals/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>考虑区间的约束</li><li>由a-b&gt;c等条件 —&gt; dis[[b]&gt;=dis[a]+q[i].d;</li><li>跑spfa</li><li>存在环时无解</li><li>不连通时解为正无穷</li></ul></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=5e4+10,inf=1e9+7;int n,m,head[maxn],num,dis[maxn],s=inf,t;bool use[maxn],fl;struct fy{int to,d,next;}q[maxn&lt;&lt;2];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(int a){    use[a]=true;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(dis[b]&lt;dis[a]+q[i].d)        {            dis[b]=dis[a]+q[i].d;            sp(b);        }    }    use[a]=false;}int main(){    scanf(&quot;%d&quot;,&amp;n);int a,b,c;    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        s=min(s,a);t=max(t,b);        add(a-1,b,c);    }    for(int i=s;i&lt;=t;i++)     {add(i-1,i,0);add(i,i-1,-1);}    memset(dis,-1,sizeof dis);dis[s-1]=0;    sp(s-1);    printf(&quot;%d\n&quot;,dis[t]);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTQxMzkwODY3Ml19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.4 练习 1」糖果</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.4%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E7%B3%96%E6%9E%9C/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.4%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>差分裸题<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=1e5+10;int n,m,head[maxn],num;ll dis[maxn];bool use[maxn],fl,vis[maxn];struct fy{int to,d,next;}q[maxn&lt;&lt;1];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}void sp(int a){  use[a]=true;vis[a]=true;  for(int i=head[a];i;i=q[i].next)  {      int b=q[i].to;      if(dis[b]&lt;dis[a]+q[i].d)      {          dis[b]=dis[a]+q[i].d;          if(use[b]){fl=true;return;}          sp(b);          if(fl)return;      }  }  use[a]=false;}int main(){  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;  for(int i=1;i&lt;=m;i++)  {      scanf(&quot;%d%d%d&quot;,&amp;c,&amp;a,&amp;b);      if(c==1){add(a,b,0);add(b,a,0);}      if(c==2){add(a,b,1);}      if(c==3){add(b,a,0);}      if(c==4){add(b,a,1);}      if(c==5){add(a,b,0);}      if(a==b&amp;&amp;!c%2)      {          printf(&quot;-1\n&quot;);          return 0;      }  }  for(int i=1;i&lt;=n;i++)if(!vis[i])  {dis[i]=1;sp(i);}  ll ans=0;  for(int i=1;i&lt;=n;i++)ans+=dis[i];  if(fl)printf(&quot;-1\n&quot;);  else printf(&quot;%lld\n&quot;,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTczMDYyMDIxXX0=--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.6 例 1」分离的路径</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.6%20%E4%BE%8B%201%E3%80%8D%E5%88%86%E7%A6%BB%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.6%20%E4%BE%8B%201%E3%80%8D%E5%88%86%E7%A6%BB%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>除了打人,我什么都不想干<br>我开始怀疑割边的定义</strong></p></blockquote><ul><li>割边</li><li>有重边 ~(虽然只有一组)~</li><li>边双联通分量</li><li>度数统计</li><li>将一个有割边的无向图转化成边双联通图至少加 <strong>(leaf+1)/2</strong>条边~(leaf表示将边双缩点后形成的树的叶子节点数)~</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;stack&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=5e3+10;int n,m,head[maxn],num,bi,cnt,ans,fa[maxn],in[maxn];bool use[maxn&lt;&lt;2];int dfn[maxn],low[maxn],input,xx[maxn],w,pa[maxn];struct fy{int from,to,next,h;}q[maxn&lt;&lt;2];void add(int a,int b){    q[++num]=(fy){a,b,head[a],++bi};head[a]=num;    q[++num]=(fy){b,a,head[b],bi};head[b]=num;}void tar(int a){    dfn[a]=low[a]=++input;xx[++w]=a;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(q[i].h==pa[a])continue;//说吧,你这个条件要哪样,你真的是割边?(想哭)        //就你最皮        if(!dfn[b]){pa[b]=q[i].h;tar(b);low[a]=min(low[a],low[b]);}        else low[a]=min(low[a],dfn[b]);    }    if(dfn[a]==low[a])    {        cnt++;        while(xx[w+1]!=a)        {fa[xx[w]]=cnt;w--;}    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b;    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);        add(a,b);    }    tar(1);    for(int i=1;i&lt;=num;i++)    {        a=fa[q[i].from];        b=fa[q[i].to];        if(a!=b)in[b]++;    }    for(int i=1;i&lt;=cnt;i++)if(in[i]==1)ans++;    printf(&quot;%d\n&quot;,(ans+1)/2);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTEyMDUzNjY3MzJdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥 </tag>
            
            <tag> 边双联通分量 </tag>
            
            <tag> tarjan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 3.6 练习 1」网络</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.6%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%203.6%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>求割点</li><li>没了</li></ul><p>非常裸的一道割点<br>读入有点恶心</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=200;int n,m,head[maxn],num,root,ans;char str[maxn&lt;&lt;2];bool use[maxn];int dfn[maxn],low[maxn],input;struct fy{int to,next;}q[maxn*maxn];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void tar(int a,int fa){    dfn[a]=low[a]=++input;int ch=0;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(!dfn[b])        {            ch++;            tar(b,a);low[a]=min(low[a],low[b]);            if((root==a&amp;&amp;ch&gt;1)||(root!=a&amp;&amp;dfn[a]&lt;=low[b]))            if(!use[a])use[a]=true,ans++;        }        else if(b!=fa) low[a]=min(low[a],dfn[b]);    }}int main(){    while(scanf(&quot;%d&quot;,&amp;n)==1)    {        if(n==0)break;int a,b;        memset(head,0,sizeof head);num=0;ans=0;        memset(dfn,0,sizeof dfn);memset(low,0,sizeof low);input=0;        memset(use,false,sizeof use);        while(scanf(&quot;%d&quot;,&amp;a)&amp;&amp;a)        {            gets(str);int l=strlen(str);int x=0;            while(x&lt;l)            {                while(str[x]&lt;&#39;0&#39;||str[x]&gt;&#39;9&#39;)x++;                int b=0;                while(str[x]&gt;=&#39;0&#39;&amp;&amp;str[x]&lt;=&#39;9&#39;)                {b*=10;b+=str[x]-&#39;0&#39;;x++;}                add(a,b);add(b,a);            }        }        for(int i=1;i&lt;=n;i++)if(!dfn[i]){root=i;tar(i,0);}        printf(&quot;%d\n&quot;,ans);    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTgzMjk1MjM5Ml19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
            <tag> 割点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.1 例 1」石子合并</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E4%BE%8B%201%E3%80%8D%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E4%BE%8B%201%E3%80%8D%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>经典的不要不要的</li><li>直接套用区间DP模板<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=410;int n,f[maxn][maxn],s[maxn],f1[maxn][maxn];int main(){  scanf(&quot;%d&quot;,&amp;n);memset(f1,0x3f,sizeof f1);  for(int i=1;i&lt;=n;i++)  {      scanf(&quot;%d&quot;,&amp;s[i]);      s[i+n]=s[i];      s[i]+=s[i-1];      f1[i][i]=0;      f1[i+n][i+n]=0;  }  for(int i=1;i&lt;=n;i++)s[i+n]+=s[i+n-1];  for(int l=1;l&lt;n*2;l++)  for(int i=1;i+l&lt;=n*2;i++)  {      int j=i+l;      for(int k=i;k&lt;j;k++)      {          f[i][j]=max(f[i][j],f[i][k]+f[k+1][j]+s[j]-s[i-1]);          f1[i][j]=min(f1[i][j],f1[i][k]+f1[k+1][j]+s[j]-s[i-1]);      }  }  int ans=0,bns=f1[0][0];  for(int i=1;i&lt;=n;i++)  {      ans=max(ans,f[i][i+n-1]);      bns=min(bns,f1[i][i+n-1]);  }  printf(&quot;%d\n%d\n&quot;,bns,ans);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTk5MDM3MTU1Nl19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HDU warm up</title>
      <link href="/2018/10/23/HDU%20warm%20up/"/>
      <url>/2018/10/23/HDU%20warm%20up/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>有一张联通的无向图,再加一条无向边后最少的桥的数量</p></blockquote><ul><li>求桥时将边双缩点,记录桥数 <strong>ans</strong></li><li>建树,求最长路长度 <strong>bns</strong></li><li>答案为 <strong>ans-bns</strong> </li><li>多组数据,注意初始化</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=2e5+10,maxm=1e6+10;int n,m,head[maxn],num,cnt,bi,ans;int dfn[maxn],low[maxn],input,fa[maxn],pa[maxn];int xx[maxn],w,headd[maxn],numm,mdep,ww;struct fy{int from,to,next,h;}q[maxm&lt;&lt;1];struct ffy{int to,next;}qq[maxm&lt;&lt;1];void add(int a,int b){    q[++num]=(fy){a,b,head[a],++bi};head[a]=num;    q[++num]=(fy){b,a,head[b],bi};head[b]=num;}void addd(int a,int b){qq[++numm]=(ffy){b,headd[a]};headd[a]=numm;}void tar(int a){    dfn[a]=low[a]=++input;xx[++w]=a;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;if(q[i].h==pa[a])continue;        if(!dfn[b])        {            pa[b]=q[i].h;tar(b);            low[a]=min(low[a],low[b]);            if(dfn[a]&lt;low[b])ans++;        }        else low[a]=min(low[a],dfn[b]);    }    if(low[a]==dfn[a])    {        ++cnt;        while(xx[w+1]!=a)        {            fa[xx[w]]=cnt;            w--;        }    }}void dfs(int a,int fat,int dep){    if(dep&gt;mdep)    {        mdep=dep;        ww=a;    }    for(int i=headd[a];i;i=qq[i].next)    {        int b=qq[i].to;if(b==fat)continue;        dfs(b,a,dep+1);    }}int main(){    int a,b;    while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)==2)    {        if(n==0&amp;&amp;m==0)break;        memset(head,0,sizeof head);memset(dfn,0,sizeof dfn);        memset(low,0,sizeof low);memset(pa,0,sizeof pa);        memset(headd,0,sizeof headd);        num=0;cnt=0;bi=0;w=0;input=0;numm=0;ans=0;ww=0;        for(int i=1;i&lt;=m;i++)        {scanf(&quot;%d%d&quot;,&amp;a,&amp;b);add(a,b);}        tar(1);        for(int i=1;i&lt;=num;i++)        {            a=fa[q[i].from];b=fa[q[i].to];            if(a!=b)addd(a,b);        }        mdep=0;dfs(1,0,0);        mdep=0;dfs(ww,0,0);        printf(&quot;%d\n&quot;,ans-mdep);    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE1OTc1ODc0MDddfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥 </tag>
            
            <tag> 边双联通分量 </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.1 练习 1」括号配对</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<ul><li>个人觉得比较迷幻<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=210;int n,f[maxn][maxn];char str[maxn];int main(){  scanf(&quot;%s&quot;,str+1);n=strlen(str+1);  for(int i=1;i&lt;=n;i++)f[i][i]=1;  for(int l=1;l&lt;n;l++)for(int i=1;i+l&lt;=n;i++)  {      int j=i+l;      f[i][j]=0x7fffffff;for(int k=i;k&lt;j;k++)      f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]);      if((str[i]==&#39;(&#39;&amp;&amp;str[j]==&#39;)&#39;)||(str[i]==&#39;[&#39;&amp;&amp;str[j]==&#39;]&#39;))      f[i][j]=min(f[i][j],f[i+1][j-1]);  }  printf(&quot;%d\n&quot;,f[1][n]);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTExNDYwNzIwNzFdfQ==--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.1 练习 3」矩阵取数游戏</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%9F%A9%E9%98%B5%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.1%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E7%9F%A9%E9%98%B5%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>我做这道题的路途十分<del>坎坷</del>平坦</p><p>我曾多次点进这道题目,但一直没下定把它A掉 <del>(因为太懒…….好吧,其实是我太弱)</del></p><p>直到有一天,一个人让我下点决心</p><p>教练给我们出了一套题,其中就有这道,其他同学愉快的AK,我只写了个暴力,40…..</p><h3 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a><strong>言归正传</strong></h3><p>很显然这是一道区间DP <del>(没看出来的我还真是抱歉)</del></p><p>又因为取数的操作每一行不会相互影响,所以可以每一行独立求解,最后把每行的最优解累加得出结果</p><p>对于一个区间 <strong>[i,j]</strong> ,无外乎两种选择,选左边或右边,再结合题意,DP方程就很明白</p><p>我们用<strong>f[i,j]</strong> 表示区间<strong>[i,j]</strong> 所能得到的最大结果,<strong>s[i]</strong> 存储区间的数,DP方程为</p><script type="math/tex; mode=display">f[i,j]=max((f[i+1,j]+s[i])<<1),(f[i,j-1]+s[j])<<1))</script><p>如果只是单纯的区间DP,那么就很简单,十几行代码轻松搞定.蛋柿,long<br>long只能过60,想体验AC的快感就必须用高精,这大概也是很多人对此题望而却步的原因</p><p>我看到很多<strong>dalao</strong>的题解用到了<strong>int128</strong>,用起来确实非常方便,但还是建议还在CCF比赛中水深火热的OIer们少用,因为在CCF的比赛中不允许<strong>int128</strong>,还是老老实实地打高精吧</p><p>话不多说上代码<del>(代码很丑,dalao勿喷)</del></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;const int maxn=88;//看起来很吉利的样子 int n,m; int f[maxn][maxn][maxn],s[maxn],su[maxn][maxn];//f表示区间[i,j]的最大结果,多开一维便于打高精;su储存s拆开的每一位上的数 int g1[maxn],g2[maxn],ans[maxn];//ans储存答案,g1,g2中间过渡答案; void fu(int a)//将每一个数拆分装进su数组 a表示s的下标 {    int w=0;//位数     while(s[a])    {        su[a][++w]=s[a]%10;        s[a]/=10;    }    su[a][0]=w;}void xx(int a,int b)//高精乘法处理倍增(其实可以用高精加法) a,b表示正在转移的区间 {    for(int i=1;i&lt;=f[a][b][0];i++)     f[a][b][i]*=2;    for(int i=1;i&lt;=f[a][b][0];i++)     {        f[a][b][i+1]+=f[a][b][i]/10;        f[a][b][i]=f[a][b][i]%10;    }    if(f[a][b][f[a][b][0]+1]) f[a][b][0]+=1;    //第0位储存该高精数的位数}void make(int a,int b)//DP转移 a,b表示正在转移的区间 {    int l1=max(f[a+1][b][0],su[a][0]);    int l2=max(f[a][b-1][0],su[b][0]);    int gg=1;//gg表示f[a][b]取f[j+1][j+k]+s[j]&lt;&lt;1还是f[j][j+k-1]+s[j+k]&lt;&lt;1     memset(g1,0,sizeof g1);//清空过渡数组    memset(g2,0,sizeof g2);     for(int i=1;i&lt;=l1;i++)//高精加法 f[j+1][j+k]+s[j]    {        g1[i]+=f[a+1][b][i]+su[a][i];        g1[i+1]+=g1[i]/10;        g1[i]%=10;    }    if(g1[l1+1]) l1++;//记录高精数的位数     g1[0]=l1;    for(int i=1;i&lt;=l2;i++)//高精加法 f[j][j+k-1]+s[j+k]     {        g2[i]+=f[a][b-1][i]+su[b][i];        g2[i+1]+=g2[i]/10;        g2[i]%=10;    }    if(g2[l2+1]) l2++;//记录高精数的位数     g2[0]=l2;    if(g1[0]&gt;g2[0]) gg=1;//比较 f[j+1][j+k]+s[j]和f[j][j+k-1]+s[j+k]大小 决定f[a][b]取舍     else if(g1[0]&lt;g2[0]) gg=2;    else     {        for(int i=g1[0];i;i--)        if(g1[i]&gt;g2[i]) {gg=1;break;}        else if(g1[i]&lt;g2[i]) {gg=2;break;}    }    if(gg==1) for(int i=0;i&lt;=g1[0];i++) f[a][b][i]=g1[i];    else for(int i=0;i&lt;=g2[0];i++) f[a][b][i]=g2[i];    xx(a,b);//将结果倍增 }void add(int a,int b)//高精加法,累加每一行的最优解 {    int l=max(ans[0],f[a][b][0]);    for(int i=1;i&lt;=l;i++)    {        ans[i]+=f[a][b][i];        ans[i+1]+=ans[i]/10;        ans[i]%=10;    }    if(ans[l+1]) l++;    ans[0]=l;//记录答案位数 }int main()//主程序 {//    freopen(&quot;game.in&quot;,&quot;r&quot;,stdin);//    freopen(&quot;game.out&quot;,&quot;w&quot;,stdout);    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    while(n--)    {        memset(su,0,sizeof su);//清空数组         memset(f,0,sizeof f);        for(int i=1;i&lt;=m;i++)        {            scanf(&quot;%d&quot;,&amp;s[i]);            fu(i);//将s[i]拆分         }        for(int k=0;k&lt;m;k++)            for(int j=1;j+k&lt;=m;j++)                make(j,j+k);//DP方程转移 //        f[j][j+k]=max(f[j+1][j+k]+s[j]&lt;&lt;1,f[j][j+k-1]+s[j+k]&lt;&lt;1);        add(1,m);//累加最优解 //        ans+=f[1][m];    }    for(int i=ans[0];i;i--)//输出答案     printf(&quot;%d&quot;,ans[i]);    if(ans[0]==0) printf(&quot;0\n&quot;);//特判是否为0     return 0;}</code></pre><p>丑陋的代码!!!</p><!--stackedit_data:eyJoaXN0b3J5IjpbMjA3MDIyMzI3MF19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间DP </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 例 1」二叉苹果树</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%201%E3%80%8D%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%201%E3%80%8D%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<ul><li>树形背包<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=110;int n,m,head[maxn],num,f[maxn][maxn];struct fy{int to,d,next;}q[maxn&lt;&lt;1];void add(int a,int b,int c){q[++num]=(fy){b,c,head[a]};head[a]=num;}int dfs(int a,int fa){  int sum=1;  for(int i=head[a];i;i=q[i].next)  {      int b=q[i].to;if(b==fa)continue;      f[b][1]=q[i].d;sum+=dfs(b,a);      for(int j=sum;j&gt;0;j--)for(int k=0;k&lt;j;k++)      f[a][j]=max(f[a][j],f[a][j-k]+f[b][k]);  }  return sum;}int main(){  scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;  for(int i=1;i&lt;n;i++){scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);add(a,b,c);add(b,a,c);}  dfs(1,0);  printf(&quot;%d&quot;,f[1][m+1]);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTA0NTA2MzQyMV19--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 例 2」选课</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%202%E3%80%8D%E9%80%89%E8%AF%BE/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%202%E3%80%8D%E9%80%89%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<ul><li>还是树形背包<pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1010;int n,m,head[maxn],num,p[maxn],f[maxn][maxn];struct fy{int to,next;}q[maxn];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}int dfs(int a){  int sum=1;f[a][1]=p[a];  for(int i=head[a];i;i=q[i].next)  {      int b=q[i].to;sum+=dfs(b);      for(int j=sum;j&gt;=1;j--)for(int k=j-1;k&gt;=0;k--)      f[a][j]=max(f[a][j],f[a][j-k]+f[b][k]);  }  return sum;}int main(){  scanf(&quot;%d%d&quot;,&amp;m,&amp;n);int x,y;  for(int i=1;i&lt;=m;i++){scanf(&quot;%d%d&quot;,&amp;x,&amp;p[i]);add(x,i);}  dfs(0);printf(&quot;%d\n&quot;,f[0][n+1]);  return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE3ODYyOTA4MjJdfQ==--></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 例 3」数字转换</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%203%E3%80%8D%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%203%E3%80%8D%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>树上找最长链,也就是树的直径<br>两边dfs<br>第一遍从任意点出发找当前最远点<br>第二遍从上一遍的最远点出发找最长链<br>可以证明该链为树的一条直径<br><del>我不会证明</del><br>暴力加边就好</strong></p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;const int maxn=5e4+10;int n,head[maxn],num,w,l;struct fy{int to,next;}q[maxn&lt;&lt;1];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void dfss(int a,int fa,int dep){    if(dep&gt;l){l=dep;w=a;}    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;if(b==fa)continue;        dfss(b,a,dep+1);    }}int dfs(int a,int fa){    int ans=0;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;if(b==fa)continue;        ans=max(ans,dfs(b,a));    }    return ans+1;}int main(){    scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++)    {        int a=sqrt(i),b=0;        for(int j=1;j&lt;=a;j++)if(i%j==0)        {            b+=j;            if(i/j!=j&amp;&amp;i/j!=i)b+=i/j;        }        if(b&lt;i&amp;&amp;b)add(i,b),add(b,i);    }    dfss(1,n+1,0);    printf(&quot;%d&quot;,dfs(w,n+1)-1);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTExNjE5MzY3MDhdfQ==--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的直径 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 例 4」战略游戏</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%204%E3%80%8D%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E4%BE%8B%204%E3%80%8D%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>树的最小点覆盖问题<br>DP,贪心,二分图都可以做<br>二分图比较简单<br>利用二分图的最大匹配数值上等于最小点覆盖的性质</strong></p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1510;int n,p[maxn],head[maxn],num,ans;bool ex[maxn],use[maxn];struct fy{int to,next;}q[maxn&lt;&lt;1];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}bool find(int a){    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(!use[b])        {            use[b]=true;            if(!p[b]||find(p[b]))            {                p[b]=a;                return true;            }        }    }    return false;}int main(){    scanf(&quot;%d&quot;,&amp;n);int a,b,c;    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);a++;ex[a]=true;        for(int j=1;j&lt;=b;j++)        {            scanf(&quot;%d&quot;,&amp;c);c++;ex[c]=true;            add(a,c);add(c,a);        }    }    for(int i=1;i&lt;=1500;i++)if(ex[i])    {        memset(use,false,sizeof use);        if(find(i))ans++;    }    printf(&quot;%d\n&quot;,ans/2);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTU5Mzc2MTgwN119--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 最小点覆盖 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 练习 2」旅游规划</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>求树的所有直径<br>记录三个d<br>d1:他到他的子树中的最长距离<br>d2:他到他的子树中的次长距离<br>d3:他绕过父亲的最长距离<br>如果d1+max(d2+d3)==直径,输出</strong></p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=2e5+10;int n,head[maxn],num,d1[maxn],d2[maxn],d3[maxn],ans;struct fy{int to,next;}q[maxn&lt;&lt;1];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void dfs(int a,int fa){    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;if(b==fa)continue;        dfs(b,a);        if(d1[b]+1&gt;=d1[a])        {            d2[a]=d1[a];            d1[a]=d1[b]+1;        }        else if(d1[b]+1&gt;d2[a])d2[a]=d1[b]+1;        ans=max(ans,d1[a]+d2[a]);    }}void dfs1(int a,int fa){    int sum=0;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(b!=fa&amp;&amp;d1[a]==d1[b]+1)sum++;    }    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;if(b==fa)continue;        if(sum==1&amp;&amp;d1[a]==d1[b]+1)d3[b]=max(d2[a],d3[a])+1;        else d3[b]=max(d1[a],d3[a])+1;        dfs1(b,a);    }}int main(){    scanf(&quot;%d&quot;,&amp;n);int a,b;    for(int i=1;i&lt;n;i++){scanf(&quot;%d%d&quot;,&amp;a,&amp;b);a++;b++;add(a,b);add(b,a);}    dfs(1,0);dfs1(1,0);    for(int i=1;i&lt;=n;i++)if(ans==d1[i]+max(d2[i],d3[i]))printf(&quot;%d\n&quot;,i-1);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTM1ODUxNDAxXX0=--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的直径 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.2 练习 3」周年纪念晚会</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5%E6%99%9A%E4%BC%9A/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.2%20%E7%BB%83%E4%B9%A0%203%E3%80%8D%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5%E6%99%9A%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>没有上司的舞会改了名<br>f[i][0]:这个人去<br>f[i][1]:这个人不去</strong></p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=6010;int n,head[maxn],num,f[maxn][2],in[maxn],v[maxn];struct fy{int to,next;}q[maxn];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void dfs(int a){    if(v[a])f[a][1]=v[a];    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;dfs(b);        f[a][0]+=max(f[b][0],f[b][1]);        f[a][1]+=f[b][0];    }}int main(){    scanf(&quot;%d&quot;,&amp;n);int a,b;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;v[i]);    while(scanf(&quot;%d%d&quot;,&amp;b,&amp;a))    {        if(!a&amp;&amp;!b)break;        add(a,b);in[b]++;    }    int ans=0;    for(int i=1;i&lt;=n;i++)if(!in[i])    {        dfs(i);        ans+=max(f[i][0],f[i][1]);    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbOTAwMjMzOTY2XX0=--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.4 例 1」骑士</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E4%BE%8B%201%E3%80%8D%E9%AA%91%E5%A3%AB/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E4%BE%8B%201%E3%80%8D%E9%AA%91%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<p>枚举每一层的每一个状态,合法就处理</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;int n,m,num[1&lt;&lt;10];ll f[12][1&lt;&lt;10][12*12];bool use[1&lt;&lt;10];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=0;i&lt;(1&lt;&lt;n);i++)if(!(i&amp;(i&lt;&lt;1)))    {        use[i]=true;int t=i;        while(t){if(t&amp;1)num[i]++;t&gt;&gt;=1;}        f[1][i][num[i]]=1;    }    for(int i=2;i&lt;=n;i++)    for(int j=0;j&lt;(1&lt;&lt;n);j++)if(use[j])    for(int k=0;k&lt;(1&lt;&lt;n);k++)if(use[k]&amp;&amp;!(j&amp;k)&amp;&amp;!(j&amp;(k&lt;&lt;1))&amp;&amp;!(j&amp;(k&gt;&gt;1)))    for(int l=0;l&lt;=m;l++)    f[i][j][num[j]+l]+=f[i-1][k][l];    ll ans=0;    for(int i=0;i&lt;(1&lt;&lt;n);i++)ans+=f[n][i][m];    printf(&quot;%lld\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTc2MTExNzUyM119-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.4 例 2」牧场的安排</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E4%BE%8B%202%E3%80%8D%E7%89%A7%E5%9C%BA%E7%9A%84%E5%AE%89%E6%8E%92/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E4%BE%8B%202%E3%80%8D%E7%89%A7%E5%9C%BA%E7%9A%84%E5%AE%89%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<p>同骑士</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;int n,m,map[14][14],inf=1e8,f[14][1&lt;&lt;12][14*14],num[1&lt;&lt;12],s[14];bool use[1&lt;&lt;12];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a;    for(int i=1;i&lt;=n;i++)    {        for(int j=1;j&lt;=m;j++){scanf(&quot;%d&quot;,&amp;a);s[i]&lt;&lt;=1;s[i]|=(!a);}    }    for(int i=0;i&lt;(1&lt;&lt;m);i++)if(!(i&amp;(i&lt;&lt;1)))    {        use[i]=true;int t=i;        while(t){if(t&amp;1)num[i]++;t&gt;&gt;=1;}        if(!(i&amp;s[1]))f[1][i][num[i]]=1;    }    for(int i=2;i&lt;=n;i++)    for(int j=0;j&lt;(1&lt;&lt;m);j++)if(use[j]&amp;&amp;!(j&amp;s[i]))    for(int k=0;k&lt;(1&lt;&lt;m);k++)if(use[k]&amp;&amp;!(k&amp;s[i-1])&amp;&amp;!(j&amp;k))    for(int l=0;l&lt;=n*m;l++)f[i][j][num[j]+l]+=f[i-1][k][l];    int ans=0;    for(int i=0;i&lt;(1&lt;&lt;m);i++)for(int j=0;j&lt;=n*m;j++)ans+=f[n][i][j];    printf(&quot;%d\n&quot;,ans%inf);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbODgxODcxMTA0XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.4 练习 1」涂抹果酱</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%B6%82%E6%8A%B9%E6%9E%9C%E9%85%B1/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E7%BB%83%E4%B9%A0%201%E3%80%8D%E6%B6%82%E6%8A%B9%E6%9E%9C%E9%85%B1/</url>
      
        <content type="html"><![CDATA[<p>方法同二维,但状态由二维变成三维</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1e4+10,maxm=243,inf=1e6;int mod[6]={0,3,9,27,81,243};int n,m,p,f[maxn][maxm],s[maxn];bool use[maxm];bool ok(int a){    int b=a%3;a/=3;int c=a%3;    for(int i=2;i&lt;=m;i++)    {        if(b==c)return false;        b=c;a/=3;c=a%3;    }    return true;}bool can(int a,int b){    for(int i=1;i&lt;=m;i++)    {        int x=a%3,y=b%3;        if(x==y)return false;        a/=3;b/=3;    }    return true;}int main(){    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;p);int a;    for(int i=1;i&lt;=m;i++){scanf(&quot;%d&quot;,&amp;a);s[p]*=3;s[p]+=a-1;}    if(!ok(s[p]))    {        printf(&quot;0\n&quot;);        return 0;    }    for(int i=0;i&lt;mod[m];i++)if(ok(i))use[i]=true;;    if(p==1) f[1][s[p]]=1;    else for(int i=0;i&lt;mod[m];i++)if(use[i])f[1][i]=1;    for(int i=2;i&lt;=n;i++)    {        if(i==p)        {            for(int j=0;j&lt;mod[m];j++)if(use[j]&amp;&amp;can(s[p],j))            {f[i][s[p]]+=f[i-1][j];f[i][s[p]]%=inf;}            continue;        }        for(int j=0;j&lt;mod[m];j++)if(use[j])        for(int k=0;k&lt;mod[m];k++)if(use[k]&amp;&amp;can(j,k))        {            f[i][j]+=f[i-1][k];            f[i][j]%=inf;        }    }    int ans=0;for(int i=0;i&lt;mod[m];i++)if(use[i]){ans+=f[n][i];ans%=inf;}    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTczNzU4OTI4M119-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
            <tag> 三维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 5.4 练习 2」炮兵阵地</title>
      <link href="/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E7%82%AE%E5%85%B5%E9%98%B5%E5%9C%B0/"/>
      <url>/2018/10/23/%E3%80%8C%E4%B8%80%E6%9C%AC%E9%80%9A%205.4%20%E7%BB%83%E4%B9%A0%202%E3%80%8D%E7%82%AE%E5%85%B5%E9%98%B5%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<p>同时枚举两行的状态<br>合法就处理</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define mm (1&lt;&lt;m)using namespace std;int n,m,f[110][1&lt;&lt;10][1&lt;&lt;10],num[1&lt;&lt;10],s[110],p[1&lt;&lt;10],cnt;char str[15];template&lt;typename T&gt; inline bool checkMax(T&amp; a, const T&amp; b) {    return a &lt; b ? a = b, true : false;}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%s&quot;,str);        for(int j=0;j&lt;m;j++){s[i]&lt;&lt;=1;s[i]|=(str[j]==&#39;P&#39;?0:1);}    }    for(int i=0;i&lt;mm;i++)if(!((i&amp;(i&lt;&lt;1))||(i&amp;(i&lt;&lt;2))))    {        int t=i;p[++cnt]=i;        while(t){if(t&amp;1)num[cnt]++;t&gt;&gt;=1;}    }    for(register int i=1;i&lt;=cnt;i++)if(!(p[i]&amp;s[1]))        for(register int j=1;j&lt;=cnt;j++)if(!(p[i]&amp;p[j])&amp;&amp;!(p[j]&amp;s[2]))            f[2][p[i]][p[j]]=num[j]+num[i];    for(register int i=3;i&lt;=n;i++)        for(register int j=1;j&lt;=cnt;j++)if(!(p[j]&amp;s[i]))            for(register int k=1;k&lt;=cnt;k++)if(!(p[j]&amp;p[k])&amp;&amp;!(p[k]&amp;s[i-1]))                for(register int l=1;l&lt;=cnt;l++)if(!(p[k]&amp;p[l])&amp;&amp;!(p[l]&amp;s[i-2])&amp;&amp;!(p[l]&amp;p[j]))                    checkMax(f[i][p[k]][p[j]],f[i-1][p[l]][p[k]]+num[j]);    int ans=0;    for(int i=1;i&lt;=cnt;i++)if(!(s[n-1]&amp;p[i]))        for(int j=1;j&lt;=cnt;j++)if(!(p[i]&amp;p[j])&amp;&amp;!(s[n]&amp;p[j]))            checkMax(ans,f[n][p[i]][p[j]]);    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTg1MzE4NDMzMF19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>元旦晚会</title>
      <link href="/2018/10/23/%E5%85%83%E6%97%A6%E6%99%9A%E4%BC%9A/"/>
      <url>/2018/10/23/%E5%85%83%E6%97%A6%E6%99%9A%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p><a href="https://www.luogu.org/problemnew/show/P1986" target="_blank" rel="noopener"><strong>P1986</strong>  元旦晚会</a></p></blockquote><ul><li>差分约束</li><li>最长路</li></ul><p>差分裸题</p><blockquote><ol><li>dis[i]&gt;=dis[i-1]</li><li>dis[i]-dis[i-1]&lt;=1</li><li>dis[b]-dis[a-1]&gt;=c</li></ol></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=3e4+10,inf=-1e9;int n,m,head[maxn],num,root,dis[maxn];bool use[maxn];struct fy{int from,to,d,next;}q[maxn&lt;&lt;2];void add(int a,int b,int c){q[++num]=(fy){a,b,c,head[a]};head[a]=num;}void sp(){    for(int i=1;i&lt;=n;i++)dis[i]=inf;dis[root]=0;    queue&lt;int&gt;qq;qq.push(root);use[root]=true;    while(!qq.empty())    {        int a=qq.front();qq.pop();use[a]=false;        for(int i=head[a];i;i=q[i].next)        {            int b=q[i].to;            if(dis[b]&lt;dis[a]+q[i].d)            {                dis[b]=dis[a]+q[i].d;                if(!use[b]){use[b]=true;qq.push(b);}            }        }    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b,c;    root=maxn;int out=0;    for(int i=1;i&lt;=n;i++)    {        add(i,i-1,-1);        add(i-1,i,0);    }    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);        root=min(a-1,root);        out=max(out,b);        add(a-1,b,c);    }    sp();    printf(&quot;%d\n&quot;,dis[out]);    return 0;}</code></pre><p>差分约束算是非常复杂的方法<br>这题其实可以用贪心来做(区间选点模型)<br><!--stackedit_data:eyJoaXN0b3J5IjpbLTY3NTU2OTYzNl19--></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分约束 </tag>
            
            <tag> 最长路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>军训队列</title>
      <link href="/2018/10/23/%E5%86%9B%E8%AE%AD%E9%98%9F%E5%88%97/"/>
      <url>/2018/10/23/%E5%86%9B%E8%AE%AD%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><h2 id="gt-有-n-名学生参加军训，军训的一大重要内容就是走队列，而一个队列的不整齐程度是该队中最高的学生的身高与最矮的学生的身高差值的平方-现在要将-n-名参加军训的学生分成-k-个队列，每个队列的人数可以是任意非负整数。在安排队列时希望所有队列的不整齐度之和尽量小，请问不整齐度之和最小可以是多少？"><a href="#gt-有-n-名学生参加军训，军训的一大重要内容就是走队列，而一个队列的不整齐程度是该队中最高的学生的身高与最矮的学生的身高差值的平方-现在要将-n-名参加军训的学生分成-k-个队列，每个队列的人数可以是任意非负整数。在安排队列时希望所有队列的不整齐度之和尽量小，请问不整齐度之和最小可以是多少？" class="headerlink" title="&gt;有 n 名学生参加军训，军训的一大重要内容就是走队列，而一个队列的不整齐程度是该队中最高的学生的身高与最矮的学生的身高差值的平方.现在要将 n 名参加军训的学生分成 k 个队列，每个队列的人数可以是任意非负整数。在安排队列时希望所有队列的不整齐度之和尽量小，请问不整齐度之和最小可以是多少？"></a>&gt;有 n 名学生参加军训，军训的一大重要内容就是走队列，而一个队列的不整齐程度是该队中最高的学生的身高与最矮的学生的身高差值的平方.现在要将 n 名参加军训的学生分成 k 个队列，每个队列的人数可以是任意非负整数。在安排队列时希望所有队列的不整齐度之和尽量小，请问不整齐度之和最小可以是多少？</h2><ul><li>排序</li><li>DP</li></ul><blockquote><p><strong>先将身高排序,问题就转换成将一个区间切成$k$段,求$k$个区间的极值差平方和的最小值<br>对于每一个人,他的决策无非两种,加到上一个区间,或者自立门户,状态转移方程:</strong></p><ol><li><strong>加入上一个区间:</strong> &nbsp;&nbsp;$f[i][j][k]=min(f[i-1][j][k]-v[j][i-1]+v[j][i])$</li><li><strong>自立门户:</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$f[i][i][k]=min(f[i-1][j][k-1])$</li></ol><p><strong>我们可以$n^2$预处理出v数组,时间复杂度为$(o)n^3$<br>但问题又来了,空间复杂度是$n^3+n^2$,可能开不下<br>我们观察到$i$维每次有用的状态只有两位,我们可以用一个滚动数组优化空间,空间复杂度变为$3\times n^2$</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=510;int n,m,h[maxn],cnt;int f[2][maxn][maxn];int v[maxn][maxn];int main(){    freopen(&quot;queue.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;queue.out&quot;,&quot;w&quot;,stdout);    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;h[i]);    if(n==m)    {        printf(&quot;0\n&quot;);        return 0;    }    sort(h+1,h+1+n);memset(f,0x3f,sizeof f);    for(int i=1;i&lt;=n;i++)for(int j=i;j&lt;=n;j++)    v[i][j]=(h[j]-h[i])*(h[j]-h[i]);    f[0][0][0]=0;    for(int i=1;i&lt;=n;i++)    {        cnt^=1;memset(f[cnt],0x3f,sizeof f[cnt]);        for(int j=0;j&lt;i;j++)        {            for(int k=1;k&lt;=m;k++)            {                f[cnt][i][k]=min(f[cnt][i][k],f[cnt^1][j][k-1]);                f[cnt][j][k]=min(f[cnt][j][k],f[cnt^1][j][k]-v[j][i-1]+v[j][i]);            }        }    }    int ans=1e9+7;    for(int i=1;i&lt;=n;i++)    ans=min(ans,f[cnt][i][m]);    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTU3MjAzNjcwMV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分块</title>
      <link href="/2018/10/23/%E5%88%86%E5%9D%97/"/>
      <url>/2018/10/23/%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>$n$个格子，现在要把它分成若干段相邻的块，要求每块不超过$m$个格子。块数不限。求分法总数对$Q$取模的结果。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>首先想到$n^2$ 的做法,我们定义$f[i]$表示划分到$i$时的合法方案的数量,不难想到转移方程:<script type="math/tex">f[i]= \sum_{j=max(0,i-m)}^{i-1}f[j]</script><br>复杂度是$(0)n^2$<br>然而数据范围是$10^6$,我们需要继续优化;<br>观察转移方程我们发现$f[i]$实际上等于一段连续区间的和,我们可以用前缀和来优化DP,这样时间复杂度就降到了$(o)n$,这道题就解决了</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=1e6+10;int t,n,m,mod;ll f[maxn],s[maxn];int main(){    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;mod);        memset(f,0,sizeof f);        f[0]=1;s[0]=1;        for(int i=1;i&lt;=n;i++)        {            if(!(i-m))f[i]=s[i-1];            else f[i]=(s[i-1]-s[i-m-1])%mod;//记得取模            s[i]=(s[i-1]+f[i]);//            for(int j=max(0,i-m);j&lt;i;j++)//            f[i]+=f[j];        }        printf(&quot;%lld\n&quot;,f[n]);    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTM0ODY2MjYwNV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数 </tag>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>刷油漆</title>
      <link href="/2018/10/23/%E5%88%B7%E6%B2%B9%E6%BC%86/"/>
      <url>/2018/10/23/%E5%88%B7%E6%B2%B9%E6%BC%86/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>cxm 需要给一块长木板刷上油漆。他一次可以将一段的木板刷上同一种颜色，刷过的木板可以再刷成其他颜色。现在木板被分成了若干块，每块需要涂成一个确定的颜色。 cxm 希望你告诉他最少需要涂几次就可以将每块都涂成需要的颜色。</p></blockquote><ul><li>区间DP</li><li>$turn$函数比较迷</li><li>有十分有毒~(学长有毒)~</li></ul><p>还是比较简单的区间DP,就是在区间DP基础上加了一个$turn$<br>虽然我没搞懂$turn$<del>(但我拿了90,滑稽)</del></p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=2010;int n,t,s[maxn];int f[maxn][maxn];int turn(int a,int b,int c){    if(s[a]==s[b]||s[a]==s[c+1]||s[c]==s[b]||s[c]==s[c+1])return -1;    return 0;}int main(){    freopen(&quot;paint.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;paint.out&quot;,&quot;w&quot;,stdout);    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        memset(f,0x3f,sizeof f);        scanf(&quot;%d&quot;,&amp;n);        for(int i=1;i&lt;=n;i++)        {             scanf(&quot;%d&quot;,&amp;s[i]);             f[i][i]=1;        }        for(int l=1;l&lt;=n;l++)for(int i=1;i+l&lt;=n;i++)        {             int j=i+l;for(int k=i;k&lt;j;k++)             f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]+turn(i,j,k));        }        printf(&quot;%d\n&quot;,f[1][n]);    }}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbODkxMjY4MjZdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>割点和桥学习</title>
      <link href="/2018/10/23/%E5%89%B2%E7%82%B9%E5%92%8C%E6%A1%A5%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/23/%E5%89%B2%E7%82%B9%E5%92%8C%E6%A1%A5%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<hr><p>说实话,tarjan是个好东西<br>然而我却丢了他的脸<br>到现在我还是很迷糊</p><ul><li>注意缩点,割点和割边的不同</li><li>这东西有毒,剧毒<del>mmp</del></li><li>割点</li><li>割边<ul><li>当存在重边时应将记录父亲节点改为记录父亲边</li></ul></li><li>点双联通分量</li><li>边双联通分量<ul><li>可在求割边时同时求出</li></ul></li><li>tarjan</li></ul><pre><code class="lang-cpp">//割边 &amp;&amp; 没有重边#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=5e3+10;int n,m,head[maxn],num;int dfn[maxn],low[maxn],input;bool use[maxn];struct fy{int to,next;}q[maxn&lt;&lt;2];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}void tar(int a,int fa){    dfn[a]=low[a]=++input;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(!dfn[b])        {            tar(b,a);low[a]=min(low[a],low[b]);            if(dfn[a]&lt;low[b])use[i]=true;//感觉这个地方这辈子都不会懂了,太迷幻            //当然可以和割点一起求            /*if((child&gt;1&amp;&amp;root==a)||(root!=a&amp;&amp;dfn[a]&lt;=low[b])cutd[i]=true;*/            //root为根节点        }        else if(b!=fa)low[a]=min(low[a],dfn[b]);        //为什么是b!=fa呢,不懂    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b;    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);        add(a,b);add(b,a);    }    for(int i=1;i&lt;=n;i++)if(!dfn[i])tar(i,0);    for(int i=1;i&lt;=num;i++)if(use[i])printf(&quot;%d &quot;,i);    return 0;}</code></pre><p>当有重边时记录父亲<strong>边</strong></p><pre><code class="lang-cpp">//割边&amp;&amp;边双缩点&amp;&amp;有重边&amp;&amp;非边双转边双#include&lt;cstdio&gt;#include&lt;stack&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=5e3+10;int n,m,head[maxn],num,bi,cnt,ans,fa[maxn],in[maxn];bool use[maxn&lt;&lt;2];int dfn[maxn],low[maxn],input,xx[maxn],w,pa[maxn];struct fy{int from,to,next,h;}q[maxn&lt;&lt;2];//h用来装边void add(int a,int b){    q[++num]=(fy){a,b,head[a],++bi};head[a]=num;    q[++num]=(fy){b,a,head[b],bi};head[b]=num;}void tar(int a){    dfn[a]=low[a]=++input;xx[++w]=a;    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(q[i].h==pa[a])continue;//如果该边走过了就不能再走        if(!dfn[b])        {            pa[b]=q[i].h;//记录父亲边            tar(b);low[a]=min(low[a],low[b]);        }        else low[a]=min(low[a],dfn[b]);    }    if(dfn[a]==low[a])//同时边双缩点    {        cnt++;        while(xx[w+1]!=a)        {fa[xx[w]]=cnt;w--;}    }}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);int a,b;    for(int i=1;i&lt;=m;i++)    {        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);        add(a,b);    }    tar(1);    for(int i=1;i&lt;=num;i++)    {        a=fa[q[i].from];        b=fa[q[i].to];        if(a!=b)in[b]++;    }    for(int i=1;i&lt;=cnt;i++)if(in[i]==1)ans++;    printf(&quot;%d\n&quot;,(ans+1)/2);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTExMjM0NDMxMTFdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥 </tag>
            
            <tag> 割点 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>信息技术培训基础知识</title>
      <link href="/2018/10/23/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/10/23/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、高精度计算"><a href="#一、高精度计算" class="headerlink" title="一、高精度计算"></a>一、高精度计算</h3><p>（至少掌握加减乘（高精对高精），正数高精度（简化模板）加减乘除（高精度与低精度）  </p><h3 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h3><p>基本算法（选择排序、插入排序、冒泡排序、快排、堆排、归并排序、计数排序、基数排序。另外练习字符串排序、多关健字排序、排序二叉树）<br>典型应用<br>逆序对、第K小数  </p><h3 id="三、查找算法"><a href="#三、查找算法" class="headerlink" title="三、查找算法"></a>三、查找算法</h3><p>数组映射、顺序查找、二分查找（一般静态）、hash查找（可动态也可静态、编码）  </p><h3 id="四、递归、回溯、深搜"><a href="#四、递归、回溯、深搜" class="headerlink" title="四、递归、回溯、深搜"></a>四、递归、回溯、深搜</h3><p>从相关题目加深理解<br>最大公约数（减法和求余）、排列数的输出、组合数的输出、表达式计算、逆波兰式、连续最大和（递归）、上台阶问题、跳马问题、填数问题、老鼠走迷宫、因式分解、素数环、皇后问题、机器分工、数的划分、任务安排、四色问题、邮票问题、埃及分数、生日蛋糕、八数码问题、路由选择。（迭代思想、剪枝技巧、IDA*、阶乘编码）  </p><h3 id="五、广搜"><a href="#五、广搜" class="headerlink" title="五、广搜"></a>五、广搜</h3><p>魔板问题、跳棋问题、八数码问题、奇怪的电梯、翻硬币问题。（相关的优化，加快判重、双向搜索、IDA*）  </p><h3 id="六、二分"><a href="#六、二分" class="headerlink" title="六、二分"></a>六、二分</h3><p>二分加速、二分查找、二分枚举  </p><h3 id="七、数据结构"><a href="#七、数据结构" class="headerlink" title="七、数据结构"></a>七、数据结构</h3><p>栈（表达式计算）、队列（广搜中常用、单调队列）、链表、双向链表、堆、竞赛树、排序二叉树、树状数组、hash、并查集、KMP算法、RMQ、LCA、回文串问题、trie。（树的线型化应用、深搜序的应用）  </p><h3 id="八、图论"><a href="#八、图论" class="headerlink" title="八、图论"></a>八、图论</h3><p>图的两种遍历方式、图的连通性判别定（深搜索、并查集）、有向图的强连通分量（两次深搜求交法、tarjan)、拓朴排序、关键路、最短路算法（dijk、floyd、bellman、spfa)、最小生成树（prime、Kruskal）二分匹配（最大独立集、最小支配集、最小路径点覆盖问题）（题库上题目较多）欧拉路和欧拉回路、哈密顿回路、关节点、桥  </p><h3 id="九、动态规划"><a href="#九、动态规划" class="headerlink" title="九、动态规划"></a>九、动态规划</h3><p>（重中之重 练习相关基本模型）  </p><h3 id="重要思想："><a href="#重要思想：" class="headerlink" title="重要思想："></a>重要思想：</h3><p>二分、逆向思维<br><!--stackedit_data:eyJoaXN0b3J5IjpbLTg2OTgyMzE1XX0=--></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串的最小表示</title>
      <link href="/2018/10/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA/"/>
      <url>/2018/10/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>开两个指针,依次对比;<br>当第二个指针比第一个更优时,更新第一个指针为第二个指针,第二个指针+1</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=3e5+10;int n;char str[maxn];int l,w;int main(){    scanf(&quot;%d&quot;,&amp;n);    while(n--)    {        scanf(&quot;%d%s&quot;,&amp;l,str);        for(int i=0;i&lt;l;i++)        str[i+l]=str[i];        int ll=0,rr=1;        while(ll&lt;l&amp;&amp;rr&lt;l)        {            int i=0;            while(str[ll+i]==str[rr+i]) i++;            if(i&gt;=l) break;            if(str[ll+i]&gt;str[rr+i])             {                if(ll+i+1&gt;rr) ll=ll+i+1;                else ll=rr+1;            }            else if(rr+1+i&gt;ll) rr=rr+i+1;            else rr=ll+1;        }        printf(&quot;%d\n&quot;,min(ll,rr));    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTc0ODczOTE1MF19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 最小表示法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排队接水</title>
      <link href="/2018/10/23/%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4/"/>
      <url>/2018/10/23/%E6%8E%92%E9%98%9F%E6%8E%A5%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>   现在一个水龙头前面有 n 个人需要接水，他们的编号为 1 到 n 的整数。他们每个人有各自接水需要花费的时间，其中编号为 i 的人花费的时间为 Ti。另外每个人有各自的紧急程度，编号为 i 的人紧急程度为 Ei。现在我们需要给所有人排出一个序，使得总不和谐程度最低。我们定义一个人的等待时间为排在他前面的人和这个人花费的时间之和，一个人的不和谐程度为这个人的等待时间乘以这个人的紧急程度，总不和谐程度为所有人的<br>不和谐程度的和。<br>即我们需要求出一个 1 到 n 的排列 faig ，使得 $\sum_{i=1}^n( \sum^n _{j=1} T_{a_j} )$ 最小。</p></blockquote><ul><li>贪心 </li><li>然后没了</li><li>类似<code>国王游戏</code></li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=2e5+10;int n,t;ll ans,s;struct fy{    int t,v;double s;    void w(){this-&gt;s=(double)this-&gt;t/(double)this-&gt;v;}    bool operator&lt;(const fy&amp;a)    const{return s&lt;a.s;}}q[maxn];int read(){     int k=0,f=0;char c=getchar();for(;c&lt;&#39;0&#39;||c&gt;&#39;9&#39;;c=getchar())if(c==&#39;-&#39;)f=1;     for(;c&lt;=&#39;9&#39;&amp;&amp;c&gt;=&#39;0&#39;;c=getchar())k=(k&lt;&lt;3)+(k&lt;&lt;1)+c-&#39;0&#39;;return  f?-k:k;}int main(){     freopen(&quot;water.in&quot;,&quot;r&quot;,stdin);     freopen(&quot;water.out&quot;,&quot;w&quot;,stdout);     t=read();     while(t--)     {         n=read();ans=0;s=0;         for(int i=1;i&lt;=n;i++)         {q[i].t=read();q[i].v=read();q[i].w();}         sort(q+1,q+1+n);         for(int i=1;i&lt;=n;i++)         {             s+=q[i].t;             ans+=(ll)s*(ll)q[i].v;        }        printf(&quot;%lld\n&quot;,ans);    }     return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTU3NjI5NTQ0Nl19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>摆花</title>
      <link href="/2018/10/23/%E6%91%86%E8%8A%B1/"/>
      <url>/2018/10/23/%E6%91%86%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>有$n$种花,每种有$a_i$盆,要摆$m$盆,每种花连续并且编号大的在后.求有多少种摆法</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>一道简单的计数DP.<br>我们定义$f[i][j]$表示放第$i$种花时一共放了$j$盆时的方案数,那么状态转移方程:</strong><script type="math/tex">f[i][j]=\sum_{k=0}^{a[i]} f[i-1][j-k]</script></p></blockquote><ul><li>$f[0][0]=1$</li><li>$j&gt;=k$</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=110,mod=1e6+7;int n,m,f[maxn][maxn],a[maxn];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);f[0][0]=1;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;a[i]);    for(int i=1;i&lt;=n;i++)    for(int j=0;j&lt;=m;j++)    for(int k=0;k&lt;=a[i];k++)if(j&gt;=k)    f[i][j]=(f[i][j]+f[i-1][j-k])%mod;    printf(&quot;%d\n&quot;,f[n][m]);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTI1NjgwMDk5OF19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「一本通 1.1 例 5」智力大冲浪</title>
      <link href="/2018/10/23/%E6%99%BA%E5%8A%9B%E6%8C%91%E6%88%98/"/>
      <url>/2018/10/23/%E6%99%BA%E5%8A%9B%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><ul><li>带限期和罚款的单位时间任务调度<ul><li>按期限排序<ul><li>用优先队列维护</li><li>若当前时间完成的任务数少于该时间能完成的任务数,直接将权值入队</li><li>若已经相等,取出队列中最小的元素与当前权值比较,将较大的入队</li><li>最后累加队列中的元素权值,$v$减去这个和即为答案</li></ul></li></ul></li></ul></blockquote><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding:"></a>Coding:</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e3+10;int n,l,v,ans;struct fy{    int x,y;    bool operator&lt;(const fy&amp;a)    const{return x&lt;a.x;};}q[maxn];struct ffy{    int x;    bool operator&lt;(const ffy&amp;a)    const{return x&gt;a.x;}};priority_queue&lt;ffy&gt;qq;int main(){    scanf(&quot;%d%d&quot;,&amp;v,&amp;n);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;q[i].x);    for(int i=1;i&lt;=n;i++)    {        scanf(&quot;%d&quot;,&amp;q[i].y);        ans+=q[i].y;    }    sort(q+1,q+1+n);    for(int i=1;i&lt;=n;i++)    {        int a=q[i].x;        int b=q[i].y;        if(l&lt;a)        {            qq.push((ffy){b});            l++;        }        else         {            int c=qq.top().x;            if(b&gt;c)            {                qq.pop();                qq.push((ffy){b});            }        }    }    while(!qq.empty())    {        ans-=qq.top().x;        qq.pop();    }    printf(&quot;%d\n&quot;,v-ans);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 一本通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Picnic Planning</title>
      <link href="/2018/10/23/Picnic%20Planning/"/>
      <url>/2018/10/23/Picnic%20Planning/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>矮人虽小却喜欢乘坐巨大的轿车，车大到能够装下不管多少矮人。某天，N(N≤20)个矮人打算到野外聚餐。为了集中到聚餐地点，矮人A 要么开车到矮人B 家中，留下自己的轿车在矮人B 家，然后乘坐B 的轿车同行；要么直接开车到聚餐地点，并将车停放在聚餐地。尽管矮人的家非常大，能够停放无数量轿车，可是聚餐地点却最多仅仅能停放K 辆轿车。给你一张加权无向图，描写叙述了N 个矮人的家和聚餐地点，求出全部矮人开车最短总路程</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>题本身是一道$k$限制生成树裸题,但那东西太迷幻,不会.因为数据规模比较小,暴力能过,所以也没学.这里用的是状压$+Prim$.</strong><br><strong>因为根节点只能连不大于$k$条边,所以我们暴力枚举根节点能连的边的状态,再将剩下的点跑最小生成树,更新最小代价.</strong></p></blockquote><ul><li>用$map$映射每个人的名字</li><li>可能有重边,需要更新两点之间的最短距离</li><li>这里我们用邻接矩阵存边,用$Prim$跑最小生成树,不然时间复杂度过不去</li><li>每次生成树必须加够$N-1$条边后才能更新$ans$</li><li>输出应遵循题目规则</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;map&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=430;int n,k,num,cnt;int fa[22],ans,bns;map&lt; string , int &gt;mm;int ss[22][22];struct fy{    int from,to,d;    bool operator&lt;(const fy&amp;a)const{return d&lt;a.d;};}q[maxn];char str[30],str1[30];void add(int a,int b,int c){q[++num]=(fy){a,b,c};}int can(int a){    bns=0;    int he=0,w=1;    while(a)    {        ++w;        if(a&amp;1)        {            he++;fa[w]=1;            if(ss[1][w]==ss[0][0])return 0;            bns+=ss[1][w];        }        a&gt;&gt;=1;    }    if(he&lt;=k)return he;    return 0;}int find(int a){    while(a!=fa[a])a=fa[a]=fa[fa[a]];    return a;}void ku(int x)//披着羊皮的狼(滑稽){    if(!x)return;    for(int i=1;i&lt;=num;i++)    {        if(q[i].from==1||q[i].to==1)continue;        int a=find(q[i].from);        int b=find(q[i].to);        if(a!=b)        {            if(x==(cnt-1))break;            fa[a]=b;            x++;            bns+=q[i].d;            if(bns&gt;ans)return;        }    }    if(x==(cnt-1))ans=min(ans,bns);}int main(){    int t;    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        mm.clear();cnt=0;num=0;        scanf(&quot;%d&quot;,&amp;n);memset(ss,0x3f,sizeof ss);        mm[&quot;Park&quot;]=++cnt;ans=ss[0][0];        for(int i=1;i&lt;=n;i++)        {            int a,b,c;            scanf(&quot;%s%s%d&quot;,str,str1,&amp;c);            if(!mm[str])mm[str]=++cnt;            if(!mm[str1])mm[str1]=++cnt;            a=mm[str];b=mm[str1];            ss[a][b]=min(ss[a][b],c);            ss[b][a]=ss[a][b];        }        scanf(&quot;%d&quot;,&amp;k);        for(int i=1;i&lt;=cnt;i++)for(int j=i+1;j&lt;=cnt;j++)        if(ss[i][j]&amp;&amp;(ss[i][j]!=ss[0][0]))add(i,j,ss[i][j]);        sort(q+1,q+1+num);        for(int s=0;s&lt;(1&lt;&lt;(cnt-1));s++)//枚举根节点的状态        {            for(int i=1;i&lt;=cnt;i++)fa[i]=i;            ku(can(s));        }        printf(&quot;Total miles driven: %d\n&quot;,ans);//输出    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTIwNTg2NDcyMTddfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> 状压 </tag>
            
            <tag> K限制生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>核电站问题</title>
      <link href="/2018/10/23/%E6%A0%B8%E7%94%B5%E7%AB%99%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/23/%E6%A0%B8%E7%94%B5%E7%AB%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>一个核电站有N个放核物质的坑，坑排列在一条直线上。如果连续M个坑中放入核物质，则会发生爆炸，于是，在某些坑中可能不放核物质.现在，请你计算：对于给定的N和M，求不发生爆炸的放置核物质的方案总数。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>很简单的一道DP,我们定义$F[i][j]$表示第$i$个坑已经连续装了$j$个核物质,那么状态无外乎两种:</strong> </p><ol><li>下一个坑继续装</li><li>下一个坑不装</li></ol><p><strong>答案就是$\sum_{i=0}^mF[n][i]$</strong></p></blockquote><ul><li>当连续放$m$个坑的时候,就会发生爆炸,所以$m$应该减一</li><li>初始条件是$F[0][0]=1$</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=110;int n,m;ll f[maxn][10];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    f[0][0]=1;m--;    for(int i=1;i&lt;=n;i++)    {        for(int j=0;j&lt;=m;j++)        f[i][0]+=f[i-1][j];        for(int j=1;j&lt;=m;j++)        f[i][j]+=f[i-1][j-1];    }    ll ans=0;    for(int i=0;i&lt;=m;i++)ans+=f[n][i];    printf(&quot;%lld\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTEwMDIyMjk0M119-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性DP </tag>
            
            <tag> vijos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>灯泡</title>
      <link href="/2018/10/23/%E7%81%AF%E6%B3%A1/"/>
      <url>/2018/10/23/%E7%81%AF%E6%B3%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>求$L$最大值</p></blockquote><p><img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=light_bulb_1037_ddd01.gif" alt="asdfasdf"></p><blockquote><p><strong>我们设人与灯低的距离为$x$,墙上的部分长$y$,用$x$表示出$L$和$y$,通过均值不等式求解最大值</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;int t;double H,h,D;double cal(){    double x=sqrt((H-h)*D);//均值不等式成立条件    x=min(x,D);//x右边界    x=max(x,(D*H-D*h)/H);//x左边界    return D+H-x-(H-h)*D/x;}int main(){    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        scanf(&quot;%lf%lf%lf&quot;,&amp;H,&amp;h,&amp;D);        printf(&quot;%.3lf\n&quot;,cal());    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE5MTM4MzgyMThdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 均值不等式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>烽火传递</title>
      <link href="/2018/10/23/%E7%83%BD%E7%81%AB%E4%BC%A0%E9%80%92/"/>
      <url>/2018/10/23/%E7%83%BD%E7%81%AB%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>在某两座城市之间有 n 个烽火台，每个烽火台发出信号都有一定的代价。为了使情报准确的传递，在任意相邻的 m 个烽火台中至少要有一个发出信号。现在需要计算总共最少需要花费多少代价，才能使敌军来袭之时，情报能在这两座城市之间准确的传递。</p><ul><li>单调队列优化 <pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10,inf=1e9+7;int n,t,m,f[maxn][2],v[maxn];int q[maxn&lt;&lt;1],p[maxn&lt;&lt;1];int main(){  freopen(&quot;flame.in&quot;,&quot;r&quot;,stdin);  freopen(&quot;flame.out&quot;,&quot;w&quot;,stdout);  scanf(&quot;%d&quot;,&amp;t);  while(t--)  {      scanf(&quot;%d%d&quot;,&amp;n,&amp;m);      for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;v[i]);       int t=0,h=1;      for(int i=1;i&lt;=n;i++)      {           int a=0;          if(i-p[h]&gt;m)h++;          if(i&gt;m)a=v[i]+q[h];else a=v[i];          while(t&gt;=h&amp;&amp;q[t]&gt;a)t--;           q[++t]=a;p[t]=i;      }      int ans=inf;      if(n-p[h]&gt;=m)h++;      for(int i=max(h,t-m+1);i&lt;=t;i++)      ans=min(ans,q[i]);      printf(&quot;%d\n&quot;,ans);  }  return 0;}</code></pre></li></ul><hr><p>可以加一位n+1,直接作为ans,省去后面的ans统计<br><br>可以省去一些麻烦(<del>比如3个小时</del>)</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e5+10,inf=1e9+7;int n,t,m,f[maxn][2],v[maxn];int q[maxn&lt;&lt;1],p[maxn&lt;&lt;1];int main(){    freopen(&quot;flame.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;flame.out&quot;,&quot;w&quot;,stdout);    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);        for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;v[i]);         int t=0,h=1;        for(int i=1;i&lt;=n+1;i++)//n+1        {             int a=0;            if(i-p[h]&gt;m)h++;            if(i&gt;m)a=v[i]+q[h];else a=v[i];            while(t&gt;=h&amp;&amp;q[t]&gt;a)t--;             q[++t]=a;p[t]=i;        }        printf(&quot;%d\n&quot;,q[t]);//直接输出    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE3MDU4NzM2OThdfQ==--></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调队列优化DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>球和盒子问题</title>
      <link href="/2018/10/23/%E7%90%83%E5%92%8C%E7%9B%92%E5%AD%90%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/23/%E7%90%83%E5%92%8C%E7%9B%92%E5%AD%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><img src="https://s1.ax1x.com/2018/10/12/itXzw9.jpg" alt=""></p><ul><li>$F[i][j]=F[i-1][j-1]+j*F[i-1]<a href="F[1][1]=1">j</a>$</li><li>$G[i][j]=G[i][j-1]+G[i-j]<a href="G[0][i]=G[1][i]=G[i][1]=1">j</a>$</li><li>注意各种情况的初始化</li></ul><h3 id="1-放苹果"><a href="#1-放苹果" class="headerlink" title="1.放苹果"></a>1.放苹果</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=20;int t,n,m;int f[maxn][maxn];int main(){    scanf(&quot;%d&quot;,&amp;t);    for(int i=0;i&lt;=10;i++)f[0][i]=f[i][1]=f[1][i]=1;    for(int i=1;i&lt;=10;i++)for(int j=2;j&lt;=10;j++)    {        f[i][j]=f[i][j-1];        if(i&gt;=j)f[i][j]+=f[i-j][j];    }    while(t--)    {        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);        printf(&quot;%d\n&quot;,f[n][m]);    }    return 0;}</code></pre><h3 id="2-数的划分"><a href="#2-数的划分" class="headerlink" title="2.数的划分"></a>2.数的划分</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=210;int n,m;ll f[maxn][maxn];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=0;i&lt;=n;i++)f[0][i]=f[1][i]=f[i][1]=1;    for(int i=2;i&lt;=n;i++)for(int j=1;j&lt;=m;j++)    {        f[i][j]=f[i][j-1];        if(i&gt;=j)f[i][j]+=f[i-j][j];    }    printf(&quot;%lld\n&quot;,f[n-m][m]);    return 0;}</code></pre><h3 id="6-小朋友的球"><a href="#6-小朋友的球" class="headerlink" title="6.小朋友的球"></a>6.小朋友的球</h3><pre><code class="lang-cpp">//这题要高精#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=110;int n,m;ll f[maxn][maxn];int main(){    f[1][1]=1;    for(int i=2;i&lt;=100;i++)for(int j=1;j&lt;=100;j++)    f[i][j]=f[i-1][j-1]+f[i-1][j]*j;    while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)==2)    {        printf(&quot;%lld\n&quot;,f[n][m]);    }    return 0;}</code></pre><h3 id="8-盒子和小球"><a href="#8-盒子和小球" class="headerlink" title="8.盒子和小球"></a>8.盒子和小球</h3><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=20;int n,m,f[maxn][maxn];int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);f[1][1]=m;    for(int i=2;i&lt;=n;i++)for(int j=1;j&lt;=m;j++)    f[i][j]=f[i-1][j-1]*(m-j+1)+f[i-1][j]*j;    printf(&quot;%d\n&quot;,f[n][m]);    return 0;}</code></pre><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=20;int n,m,f[maxn][maxn];int work(int a){    int ans=1;    for(int i=2;i&lt;=a;i++)    ans*=i;    return ans;}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);f[1][1]=1;    for(int i=2;i&lt;=n;i++)for(int j=1;j&lt;=m;j++)    f[i][j]=f[i-1][j-1]+f[i-1][j]*j;    printf(&quot;%d\n&quot;,f[n][m]*work(m));    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMTA3ODk0NTYwNCwxNjc5NzYzNDE0XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数DP </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>贪心五种常见模型</title>
      <link href="/2018/10/23/%E8%B4%AA%E5%BF%83%E4%BA%94%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/10/23/%E8%B4%AA%E5%BF%83%E4%BA%94%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="1-区间不相交问题"><a href="#1-区间不相交问题" class="headerlink" title="1. 区间不相交问题"></a>1. 区间不相交问题</h3><blockquote><ul><li>按右端点排序</li><li>枚举,当左端点未被标记时,$ans++$,标记右端点 </li></ul><hr><h3 id="2-区间选点问题"><a href="#2-区间选点问题" class="headerlink" title="2. 区间选点问题"></a>2. 区间选点问题</h3><ul><li>按右端点排序</li><li>枚举,当该区间未被选够点时,从后往前选择未被选择的点,直到选够</li></ul><hr><h3 id="3-区间覆盖问题"><a href="#3-区间覆盖问题" class="headerlink" title="3. 区间覆盖问题"></a>3. 区间覆盖问题</h3><ul><li>按左端点排序</li><li>枚举,选择能覆盖当前节点,右端点最远的节点,将当前节点更新为该最远节点的右端点</li></ul><hr><h3 id="4-流水作业调度问题"><a href="#4-流水作业调度问题" class="headerlink" title="4. 流水作业调度问题"></a>4. 流水作业调度问题</h3><ul><li>Johnson算法(<del>比较迷,反正我没懂</del>)</li><li>按$min(i.a,j.b)&lt;min(i.b,j.a)$排序</li><li>枚举记录$ans$</li></ul><hr><h3 id="5-带限期和罚款的单位时间任务调度"><a href="#5-带限期和罚款的单位时间任务调度" class="headerlink" title="5. 带限期和罚款的单位时间任务调度"></a>5. 带限期和罚款的单位时间任务调度</h3><ul><li>按期限排序</li><li>用优先队列维护</li><li>若当前时间完成的任务数少于该时间能完成的任务数,直接将权值入队</li><li>若已经相等,取出队列中最小的元素与当前权值比较,将较大的入队</li><li>最后累加队列中的元素权值</li></ul></blockquote><!--stackedit_data:eyJoaXN0b3J5IjpbMjA5OTg2OTc5NV19-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>过河</title>
      <link href="/2018/10/23/%E8%BF%87%E6%B2%B3/"/>
      <url>/2018/10/23/%E8%BF%87%E6%B2%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p><a href="https://www.luogu.org/problemnew/show/P1052" target="_blank" rel="noopener"><strong>P1052</strong>  过河</a></p></blockquote><ul><li>排序</li><li>离散化</li><li>DP</li></ul><blockquote><p><strong>桥很长,不能直接DP;而石子数比较少,这时我们想到离散化;<br>当两点间的距离$d$大于$t$时,一定可以由d%t跳过来,所以最多只需要t+d%t种距离的状态就可以表示这两个石子之间的任意距离关系.这样就把题目中的$10^9$压缩成了$2\times t\times m$最多不超过$2000$,然后就可以放心大胆地用DP了.不过要注意题目中的”当青蛙跳到或跳过坐标为L的点时.就算青蛙已经跳出了独木桥”,所以DP的终点是一个范围而非确切的一个点，最后还要在这个范围内取最小值。</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=2e3+10;int l,s,t,m,n;int f[maxn],lo[200];bool use[maxn];int main(){    scanf(&quot;%d%d%d%d&quot;,&amp;l,&amp;s,&amp;t,&amp;m);    memset(f,0x3f,sizeof f);f[0]=0;    for(int i=1;i&lt;=m;i++)scanf(&quot;%d&quot;,&amp;lo[i]);    sort(lo+1,lo+1+m);    for(int i=1;i&lt;=m;i++)    {        if(lo[i]-lo[i-1]&gt;=t)n+=(lo[i]-lo[i-1])%t+t;        else n+=(lo[i]-lo[i-1]);        use[n]=true;    }    n+=(l-lo[m])%t;    for(int i=1;i&lt;=n+t-1;i++)    {        for(int j=s;j&lt;=t;j++)if(i-j&gt;=0)        f[i]=min(f[i],f[i-j]);        if(use[i])f[i]++;    }    int ans=1e9;    for(int i=n;i&lt;=n+t-1;i++)ans=min(ans,f[i]);    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMjIyNTQyMTM3XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性DP </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逐个击破</title>
      <link href="/2018/10/23/%E9%80%90%E4%B8%AA%E5%87%BB%E7%A0%B4/"/>
      <url>/2018/10/23/%E9%80%90%E4%B8%AA%E5%87%BB%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>现在有N个城市，其中K个被敌方军团占领了，N个城市间有N-1条公路相连，破坏其中某条公路的代价是已知的，现在，告诉你K个敌方军团所在的城市，以及所有公路破坏的代价，请你算出花费最少的代价将这K个地方军团互相隔离开，以便第二步逐个击破敌人。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>我们加一个辅助数组记录每个城市是否被占领,然后跑最大生成树.当且仅当两个城市所在的连通块都被占领时,我们不取这条边,其余时候将当前两个城市的占领属性合并,最后 $ans$=用总代价-最大生成树权值和</strong></p></blockquote><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#define ll long longusing namespace std;const int maxn=1e5+10;int n,k,fa[maxn];ll ans;bool ee[maxn];struct fy{    int from,to,d;    bool operator&lt;(const fy&amp;a)    const{return d&gt;a.d;};}q[maxn];int find(int a){    while(a!=fa[a])a=fa[a]=fa[fa[a]];    return a;}int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;k);    for(int i=1;i&lt;=k;i++)    {        int a;        scanf(&quot;%d&quot;,&amp;a);        ee[a]=true;    }    for(int i=1;i&lt;=n;i++)fa[i]=i;    for(int i=1;i&lt;n;i++)    {        scanf(&quot;%d%d%d&quot;,&amp;q[i].from,&amp;q[i].to,&amp;q[i].d);        ans+=q[i].d;    }    sort(q+1,q+n);    for(int i=1;i&lt;n;i++)    {        int a=find(q[i].from);        int b=find(q[i].to);        if(ee[a]&amp;&amp;ee[b])continue;        fa[a]=b;        ee[a]|=ee[b];ee[b]|=ee[a];//合并属性        ans-=q[i].d;    }     printf(&quot;%lld\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbNjQ2MDkzNzk2XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>钓鱼</title>
      <link href="/2018/10/23/%E9%92%93%E9%B1%BC/"/>
      <url>/2018/10/23/%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>一条路上有$N$个鱼塘,鱼塘$i$花5$min$可以钓$t_i$条鱼,但每钓一次能钓到的鱼数量会减去$s_i$,并且从鱼塘$i$走到鱼塘$i+1$会花费$5\times dis_i$的时间.现在有$H$小时的时间,可以在任意鱼塘结束,求最多能钓多少条鱼</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p><strong>非常巧妙的一道贪心题.<br>我们枚举结束的鱼塘,用总时间减去路上花掉的时间,剩下的时间用来钓鱼.<br>先将路上经过的鱼塘第一个5$min$能钓到的鱼条数加入优先队列,每次取出队列中最大元素的加入该鱼塘的答案,将该元素减去对应的$s_i$加入队列,直到时间用尽或者优先队列中最大值小于等于0,更新答案</strong></p></blockquote><ul><li>注意时间的转化</li></ul><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=110;int n,h,dis[maxn],ans,bns;int s[maxn],ss[maxn];struct ffy{    int x,y;    bool operator&lt;(const ffy&amp;a)    const{return x&lt;a.x;};};priority_queue&lt;ffy&gt;qq;int main(){    scanf(&quot;%d%d&quot;,&amp;n,&amp;h);h*=12;    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;s[i]);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;ss[i]);    for(int i=2;i&lt;=n;i++)scanf(&quot;%d&quot;,&amp;dis[i]);    for(int i=1;i&lt;=n;i++)    {        h-=dis[i];int time=0;bns=0;        for(int j=1;j&lt;=i;j++)qq.push((ffy){s[j],j});        while(++time&lt;=h&amp;&amp;!qq.empty())        {            int a=qq.top().x;            int b=qq.top().y;            if(a&lt;=0)break;            bns+=a;            qq.pop();            qq.push((ffy){a-ss[b],b});        }        ans=max(ans,bns);    }    printf(&quot;%d\n&quot;,ans);    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbMzYyNzgzMzY1XX0=-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>铺地板</title>
      <link href="/2018/10/23/%E9%93%BA%E5%9C%B0%E6%9D%BF/"/>
      <url>/2018/10/23/%E9%93%BA%E5%9C%B0%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>NS 中学新建了一个 n × n 的正方形广场，现在需要你用 1 × 2 的地板砖去铺这个广场。由于各种原因，广场上有些地方不能铺地板（比如那里种了一棵树或者有一个井盖）。显然，地板也不能重叠放置. 现在你需要求出最少有多少个格子不能被地板铺上（包括不能铺地板的地方）。</p></blockquote><ul><li>看出二分图</li><li>然后 $AC$ ~(滑稽)~</li></ul><p>只要看出是二分图模型就非常简单<br>建双向边得出的$ans$最大匹配的二倍<br>但因为一条边连接两个点所以直接输出$n^2-ans$</p><pre><code class="lang-cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=70;int n,head[maxn*maxn],num,p[maxn*maxn];int cnt,t,map[maxn][maxn];bool use[maxn*maxn];int mx[4]={0,0,-1,1};int my[4]={1,-1,0,0};char str[maxn];struct fy{int to,next;}q[maxn*maxn*10];void add(int a,int b){q[++num]=(fy){b,head[a]};head[a]=num;}bool find(int a){    for(int i=head[a];i;i=q[i].next)    {        int b=q[i].to;        if(!use[b])        {            use[b]=true;            if(!p[b]||find(p[b]))            {                p[b]=a;                return true;            }        }    }    return false;}int main(){    freopen(&quot;floor.in&quot;,&quot;r&quot;,stdin);    freopen(&quot;floor.out&quot;,&quot;w&quot;,stdout);    scanf(&quot;%d&quot;,&amp;t);    while(t--)    {        scanf(&quot;%d&quot;,&amp;n);memset(head,0,sizeof head);        cnt=0;num=0;memset(map,0,sizeof map);        memset(p,0,sizeof p);        for(int i=1;i&lt;=n;i++)        {            scanf(&quot;%s&quot;,str);            for(int j=0;j&lt;n;j++)            if(str[j]==&#39;.&#39;)map[i][j+1]=++cnt;        }        for(int i=1;i&lt;=n;i++)for(int j=1;j&lt;=n;j++)        if(map[i][j])        {            int a=map[i][j];            for(int k=0;k&lt;4;k++)            {                int b=map[i+mx[k]][j+my[k]];                if(b)add(a,b);            }        }        int ans=0;        for(int i=1;i&lt;=cnt;i++)        {            memset(use,false,sizeof use);            if(find(i))ans++;        }        printf(&quot;%d\n&quot;,n*n-ans);    }    return 0;}</code></pre><!--stackedit_data:eyJoaXN0b3J5IjpbLTE0NTYyNTc3MzBdfQ==-->]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="居然有人点开了这个页面-ΩДΩ"><a href="#居然有人点开了这个页面-ΩДΩ" class="headerlink" title="居然有人点开了这个页面 (ΩДΩ)"></a>居然有人点开了这个页面 (ΩДΩ)</h1><p>可能是你点错了,毕竟我这么菜,<br>谁会来看我呢<del>(滑稽)</del></p><p><img src="https://s1.ax1x.com/2018/10/24/ir5US0.png" alt=""></p><p>本人一名<strong>小蒟蒻</strong>,在各位大佬间苦苦挣扎,苟且偷生<del>(宝宝心里苦,难受,香菇)</del></p><p>不喜欢打游戏(偶尔玩玩),喜欢搞一些计算机上奇奇怪怪的东西(对,就是老师和爸妈口中的”不务正业”,”没名堂的东西”,”浪费时间”)</p><p>喜欢二次元,喜欢宅在家里的穷学生</p><p><img src="https://s1.ax1x.com/2018/10/24/ir5ITH.gif" alt="ir5ITH.gif"></p><p>学过一点点C++和Java,算法也有一点涉猎(请记住,是一点点,就像你对于地球那样的一点点),当然没有办法和各位大佬比</p><p><img src="https://s1.ax1x.com/2018/10/24/ir5Dw4.gif" alt="ir5Dw4.gif"></p><p>还是一位OIer,虽然马上退役了,好吧,像我这种弱鸡,根本不能说退役,是根本没入役</p><p><img src="https://s1.ax1x.com/2018/10/24/ir5yk9.jpg" alt="ir5yk9.jpg"></p><p>好吧,了解了我的菜之深后,你肯定也不想继续看下去了,但我还是厚颜无耻的写下我的联系方式</p><p>QQ: </p><blockquote><p>1836017424</p></blockquote><p>Email: </p><blockquote><p>1836017424@qq.com </p><p>scaryffy@gmail.com</p></blockquote><p>你如果有问题,可以通过上面的方式联系我(可能这辈子都不会有了)</p><p>在下学生,不能保证及时回复,但我看到了一定会回复</p><p><img src="https://s1.ax1x.com/2018/10/24/ir550e.jpg" alt="ir550e.jpg"></p><h3 id="愿幸运与你同在"><a href="#愿幸运与你同在" class="headerlink" title="愿幸运与你同在"></a>愿幸运与你同在</h3><p>但如果你有上条当麻的右手,我还真没办法</p><p>至此</p>]]></content>
      
    </entry>
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
